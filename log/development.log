DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-07-28 23:11:08 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m

ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

	bin/rake db:migrate RAILS_ENV=development

):
  activerecord (4.2.6) lib/active_record/migration.rb:392:in `check_pending!'
  activerecord (4.2.6) lib/active_record/migration.rb:373:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:88:in `__run_callbacks__'
  activesupport (4.2.6) lib/active_support/callbacks.rb:778:in `_run_call_callbacks'
  activesupport (4.2.6) lib/active_support/callbacks.rb:81:in `run_callbacks'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:27:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/reloader.rb:73:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/remote_ip.rb:78:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (27.4ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-07-28 23:11:33 -0700
  [1m[35mActiveRecord::SchemaMigration Load (0.2ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"

ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

	bin/rake db:migrate RAILS_ENV=development

):
  activerecord (4.2.6) lib/active_record/migration.rb:392:in `check_pending!'
  activerecord (4.2.6) lib/active_record/migration.rb:373:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:88:in `__run_callbacks__'
  activesupport (4.2.6) lib/active_support/callbacks.rb:778:in `_run_call_callbacks'
  activesupport (4.2.6) lib/active_support/callbacks.rb:81:in `run_callbacks'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:27:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/reloader.rb:73:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/remote_ip.rb:78:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (2.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (10.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (30.9ms)


Started GET "/" for 127.0.0.1 at 2016-07-31 23:00:25 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m

ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

	bin/rake db:migrate RAILS_ENV=development

):
  activerecord (4.2.6) lib/active_record/migration.rb:392:in `check_pending!'
  activerecord (4.2.6) lib/active_record/migration.rb:373:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:88:in `__run_callbacks__'
  activesupport (4.2.6) lib/active_support/callbacks.rb:778:in `_run_call_callbacks'
  activesupport (4.2.6) lib/active_support/callbacks.rb:81:in `run_callbacks'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:27:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/reloader.rb:73:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/remote_ip.rb:78:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (1.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (16.5ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/890002738" for 127.0.0.1 at 2016-07-31 23:01:01 -0700
  [1m[35mActiveRecord::SchemaMigration Load (0.8ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"

ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

	bin/rake db:migrate RAILS_ENV=development

):
  activerecord (4.2.6) lib/active_record/migration.rb:392:in `check_pending!'
  activerecord (4.2.6) lib/active_record/migration.rb:373:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
  activesupport (4.2.6) lib/active_support/callbacks.rb:88:in `__run_callbacks__'
  activesupport (4.2.6) lib/active_support/callbacks.rb:778:in `_run_call_callbacks'
  activesupport (4.2.6) lib/active_support/callbacks.rb:81:in `run_callbacks'
  actionpack (4.2.6) lib/action_dispatch/middleware/callbacks.rb:27:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/reloader.rb:73:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/remote_ip.rb:78:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (1.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (12.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to DeviseTokenAuthCreateUsers (20160704140141)
  [1m[35m (0.2ms)[0m  BEGIN
DEPRECATION WARNING: `#timestamps` was called without specifying an option for `null`. In Rails 5, this behavior will change to `null: false`. You should manually specify `null: true` to prevent the behavior of your existing migrations from changing. (called from block in change at /home/brian/Dev/GameTracker/rails/db/migrate/20160704140141_devise_token_auth_create_users.rb:45)
  [1m[36m (18.7ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "provider" character varying DEFAULT 'email' NOT NULL, "uid" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "confirmation_token" character varying, "confirmed_at" timestamp, "confirmation_sent_at" timestamp, "unconfirmed_email" character varying, "name" character varying, "nickname" character varying, "image" character varying, "email" character varying, "tokens" json, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (0.1ms)[0m  ROLLBACK
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/890002738" for 127.0.0.1 at 2016-07-31 23:05:26 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"890002738"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 8ms (Views: 1.2ms | ActiveRecord: 0.0ms)


Started GET "/players/890002738/statistics" for 127.0.0.1 at 2016-07-31 23:06:12 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"890002738"}
Completed 500 Internal Server Error in 13ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `find' for PlayerStatistic:Class):
  app/controllers/player_statistics_controller.rb:6:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (12.9ms)


Started GET "/players/890002738/statistics" for 127.0.0.1 at 2016-07-31 23:07:27 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"890002738"}
[active_model_serializers]   [1m[35m (2.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 890002738)
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (15.83ms)
Completed 200 OK in 27ms (Views: 15.7ms | ActiveRecord: 5.5ms)


Started GET "/players/890002738/statistics" for 127.0.0.1 at 2016-07-31 23:08:33 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"890002738"}
[active_model_serializers]   [1m[36m (4.1ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 890002738)[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (4.82ms)
Completed 200 OK in 6ms (Views: 1.1ms | ActiveRecord: 4.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/890002738/statistics" for 127.0.0.1 at 2016-07-31 23:12:34 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"890002738"}
[active_model_serializers]   [1m[35m (1.2ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 890002738)
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (63821.17ms)
Completed 200 OK in 83020ms (Views: 63821.6ms | ActiveRecord: 6.3ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:14:08 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers]   [1m[36m (4.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (6.13ms)
Completed 200 OK in 4960ms (Views: 2.2ms | ActiveRecord: 4.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:15:44 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (5.93ms)
Completed 500 Internal Server Error in 36ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000001fc1c68 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (9.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (35.2ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:25:18 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.56ms)
Completed 500 Internal Server Error in 15ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x000000025d1f18 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (11.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (25.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:27:41 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.59ms)
Completed 500 Internal Server Error in 16ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x0000000355d888 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (21.5ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:27:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (1.14ms)
Completed 500 Internal Server Error in 6ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `session_count' for #<PlayerStatistic:0x000000035353d8 @player_id=2>):
  app/serializers/player_statistic_serializer.rb:5:in `session_count'
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (11.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (22.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:28:06 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers]   [1m[35m (0.5ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (6.37ms)
Completed 200 OK in 12ms (Views: 6.4ms | ActiveRecord: 1.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-07-31 23:33:53 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.61ms)
Completed 500 Internal Server Error in 8ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x0000000463d158 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (11.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (3.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (26.4ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (2.9ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'games'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.7ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.8ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'session_players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.5ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'sessions'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.4ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (1.4ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'games'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.2ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.2ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'session_players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.1ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'sessions'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.2ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.2ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (1.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'games'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.1ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.1ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'session_players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.5ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'sessions'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (2.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.2ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (1.8ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'games'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.6ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.1ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'session_players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.3ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'sessions'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.1ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.4ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to UpdateTeamNumberOnSessionPlayers (20160611060216)
  [1m[35m (0.3ms)[0m  BEGIN
  [1m[36m (0.2ms)[0m  [1mROLLBACK[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/" for 127.0.0.1 at 2016-08-13 15:58:06 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 8ms (Views: 1.6ms | ActiveRecord: 0.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-13 15:58:30 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (3.15ms)
Completed 500 Internal Server Error in 11ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000002f455b8 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (18.5ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to DeviseTokenAuthCreateUsers (20160704140141)
  [1m[35m (0.1ms)[0m  BEGIN
DEPRECATION WARNING: `#timestamps` was called without specifying an option for `null`. In Rails 5, this behavior will change to `null: false`. You should manually specify `null: true` to prevent the behavior of your existing migrations from changing. (called from block in change at /home/brian/Dev/GameTracker/rails/db/migrate/20160704140141_devise_token_auth_create_users.rb:45)
  [1m[36m (3.8ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "provider" character varying DEFAULT 'email' NOT NULL, "uid" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "confirmation_token" character varying, "confirmed_at" timestamp, "confirmation_sent_at" timestamp, "unconfirmed_email" character varying, "name" character varying, "nickname" character varying, "image" character varying, "email" character varying, "tokens" json, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (0.1ms)[0m  ROLLBACK
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (1.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Migrating to DeviseTokenAuthCreateUsers (20160704140141)
  [1m[35m (0.1ms)[0m  BEGIN
DEPRECATION WARNING: `#timestamps` was called without specifying an option for `null`. In Rails 5, this behavior will change to `null: false`. You should manually specify `null: true` to prevent the behavior of your existing migrations from changing. (called from block in change at /home/brian/Dev/GameTracker/rails/db/migrate/20160704140141_devise_token_auth_create_users.rb:45)
  [1m[36m (13.8ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "provider" character varying DEFAULT 'email' NOT NULL, "uid" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "confirmation_token" character varying, "confirmed_at" timestamp, "confirmation_sent_at" timestamp, "unconfirmed_email" character varying, "name" character varying, "nickname" character varying, "image" character varying, "email" character varying, "tokens" json, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (1.9ms)[0m  CREATE  INDEX  "index_users_on_email" ON "users"  ("email")
  [1m[36m (1.7ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_uid_and_provider" ON "users"  ("uid", "provider")[0m
  [1m[35m (1.3ms)[0m  CREATE UNIQUE INDEX  "index_users_on_reset_password_token" ON "users"  ("reset_password_token")
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "schema_migrations" ("version") VALUES ($1)[0m  [["version", "20160704140141"]]
  [1m[35m (1.4ms)[0m  COMMIT
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35m (1.3ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'games'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.4ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.3ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'session_players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'sessions'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.2ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (2.3ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'games'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.2ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.0ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'session_players'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
  [1m[35m (1.2ms)[0m  SELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'sessions'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname

  [1m[36m (1.1ms)[0m  [1mSELECT t2.oid::regclass::text AS to_table, a1.attname AS column, a2.attname AS primary_key, c.conname AS name, c.confupdtype AS on_update, c.confdeltype AS on_delete
FROM pg_constraint c
JOIN pg_class t1 ON c.conrelid = t1.oid
JOIN pg_class t2 ON c.confrelid = t2.oid
JOIN pg_attribute a1 ON a1.attnum = c.conkey[1] AND a1.attrelid = t1.oid
JOIN pg_attribute a2 ON a2.attnum = c.confkey[1] AND a2.attrelid = t2.oid
JOIN pg_namespace t3 ON c.connamespace = t3.oid
WHERE c.contype = 'f'
  AND t1.relname = 'users'
  AND t3.nspname = ANY (current_schemas(false))
ORDER BY c.conname
[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT 1  [["email", "gametracker@example.com"]]
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "users" WHERE "users"."provider" = $1 AND "users"."email" = $2  [["provider", "email"], ["email", "gametracker@example.com"]]
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "users" ("email", "tokens", "encrypted_password", "uid", "confirmed_at", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["email", "gametracker@example.com"], ["tokens", "{}"], ["encrypted_password", "$2a$10$twJt6.Wc97i/9T6/KdyKp.X2okYAhL4El97I4X3oZO.X7bewwP7Ku"], ["uid", "gametracker@example.com"], ["confirmed_at", "2016-08-18 03:32:23.680085"], ["created_at", "2016-08-18 03:32:23.680212"], ["updated_at", "2016-08-18 03:32:23.680212"]]
  [1m[35m (2.6ms)[0m  COMMIT
  [1m[36mPlayer Load (0.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", -1]]
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "players" ("id", "created_at", "updated_at") VALUES ($1, $2, $3) RETURNING "id"[0m  [["id", -1], ["created_at", "2016-08-18 03:32:23.694061"], ["updated_at", "2016-08-18 03:32:23.694061"]]
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "players" SET "name" = $1, "updated_at" = $2 WHERE "players"."id" = $3  [["name", "Unknown"], ["updated_at", "2016-08-18 03:32:23.696821"], ["id", -1]]
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-08-17 20:40:12 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (3.1ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (3.1ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"yiQwq2G009fJWqJ9lfsHJw\":{\"token\":\"$2a$10$//imUhKwFiONIP8arLU3sOC1rtFAQkGaQdohE6QQVW8Rw4rGJnhhG\",\"expiry\":1472701212}}"], ["uid", "08a688be-5194-4af3-9f29-6d55815f476b"], ["confirmed_at", "2016-08-18 03:40:12.701018"], ["updated_at", "2016-08-18 03:40:12.701331"], ["id", 1]]
  [1m[36m (2.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "last_sign_in_ip" = $3, "current_sign_in_ip" = $4, "sign_in_count" = $5, "uid" = $6, "confirmed_at" = $7, "updated_at" = $8 WHERE "users"."id" = $9[0m  [["last_sign_in_at", "2016-08-18 03:40:12.719301"], ["current_sign_in_at", "2016-08-18 03:40:12.719301"], ["last_sign_in_ip", "127.0.0.1"], ["current_sign_in_ip", "127.0.0.1"], ["sign_in_count", 1], ["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"], ["confirmed_at", "2016-08-18 03:40:12.720437"], ["updated_at", "2016-08-18 03:40:12.720591"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
Completed 200 OK in 249ms (Views: 1.3ms | ActiveRecord: 16.8ms)


Started GET "/games/list" for 127.0.0.1 at 2016-08-17 20:40:16 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mGame Load (1.5ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.98ms)
Completed 200 OK in 171ms (Views: 14.4ms | ActiveRecord: 4.7ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-17 20:40:18 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (4.5ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.58ms)
Completed 200 OK in 20ms (Views: 1.1ms | ActiveRecord: 5.6ms)


Started GET "/games/list" for 127.0.0.1 at 2016-08-17 20:40:19 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mGame Load (1.7ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.6ms)
Completed 200 OK in 7ms (Views: 2.8ms | ActiveRecord: 3.3ms)


Started GET "/games/list" for 127.0.0.1 at 2016-08-17 20:40:35 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mGame Load (1.0ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (5.81ms)
Completed 200 OK in 12ms (Views: 7.1ms | ActiveRecord: 3.3ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-17 20:41:36 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.3ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-17 20:41:36 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (1.6ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 3.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:41:39 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (3.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.26ms)
Completed 200 OK in 12ms (Views: 6.3ms | ActiveRecord: 3.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:41:39 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (3.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 4.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:41:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:43:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.1ms | ActiveRecord: 0.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:43:57 -0700
Processing by PlayersController#show as */*
  Parameters: {"id"=>"2"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 0ms (Views: 0.1ms | ActiveRecord: 0.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:44:10 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:49:58 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:50:07 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 3ms (Views: 0.2ms | ActiveRecord: 1.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-17 20:50:19 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (3.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 8ms (Views: 0.5ms | ActiveRecord: 6.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 20:50:24 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.68ms)
Completed 500 Internal Server Error in 18ms (ActiveRecord: 0.3ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000004a94530 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (22.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 20:58:08 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (3.34ms)
Completed 500 Internal Server Error in 143611ms (ActiveRecord: 5.3ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003b86390 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (21.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (7.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (46.3ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:00:40 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.64ms)
Completed 500 Internal Server Error in 100ms (ActiveRecord: 1.8ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x000000035dfae0 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (24.8ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:01:25 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.77ms)
Completed 500 Internal Server Error in 106ms (ActiveRecord: 4.5ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x000000021a3a18 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (18.4ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:04:39 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (3.29ms)
Completed 500 Internal Server Error in 74ms (ActiveRecord: 1.1ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003dceb48 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (3.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (23.5ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:05:15 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (3.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (7.96ms)
Completed 500 Internal Server Error in 172ms (ActiveRecord: 3.8ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x0000000391c960 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (5.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (27.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:05:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (2.7ms)
Completed 500 Internal Server Error in 10ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003c8c5c8 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (26.2ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:12:17 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (87.32ms)
Completed 500 Internal Server Error in 3369ms (ActiveRecord: 3.2ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000004432020 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (40.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (9.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (66.4ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:12:35 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (4.24ms)
Completed 500 Internal Server Error in 16731ms (ActiveRecord: 0.5ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003243968 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (21.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:13:21 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (0.29ms)
Completed 200 OK in 105ms (Views: 86.9ms | ActiveRecord: 2.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:16:11 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (6.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (25.91ms)
Completed 200 OK in 119ms (Views: 102.8ms | ActiveRecord: 11.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-08-17 21:16:19 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (2.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (3.69ms)
Completed 200 OK in 10ms (Views: 2.1ms | ActiveRecord: 7.7ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-08-17 21:16:21 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"3"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (4.1ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (4.87ms)
Completed 200 OK in 9ms (Views: 2.0ms | ActiveRecord: 6.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:16:22 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (5.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (4.0ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (4.7ms)
Completed 200 OK in 12ms (Views: 2.2ms | ActiveRecord: 9.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:16:45 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.2ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (1.0ms)[0m  [1mSELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (41.96ms)
Completed 200 OK in 113ms (Views: 104.1ms | ActiveRecord: 4.4ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:17:45 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (5.87ms)
Completed 500 Internal Server Error in 82ms (ActiveRecord: 0.7ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000001f2be70 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (17.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (38.9ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:18:34 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (3.22ms)
Completed 500 Internal Server Error in 70ms (ActiveRecord: 0.3ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x000000044b0970 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (8.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (5.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (21.5ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:18:40 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers] Rendered PlayerStatistics::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (3.2ms)
Completed 200 OK in 73ms (Views: 65.4ms | ActiveRecord: 0.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:24:23 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (4.41ms)
Completed 500 Internal Server Error in 105ms (ActiveRecord: 0.3ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000002a2f3d0 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (14.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:24:35 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.0ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.65ms)
Completed 500 Internal Server Error in 105ms (ActiveRecord: 1.6ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000001f3e318 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (19.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:24:43 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (2.55ms)
Completed 500 Internal Server Error in 71ms (ActiveRecord: 1.0ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003b88a50 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (4.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (17.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:25:59 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (0.43ms)
Completed 200 OK in 82ms (Views: 77.2ms | ActiveRecord: 0.3ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-17 21:26:51 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (5.65ms)
Completed 200 OK in 104ms (Views: 89.7ms | ActiveRecord: 2.8ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:03:20 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (2.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (3.55ms)
Completed 200 OK in 6ms (Views: 1.9ms | ActiveRecord: 3.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:04:07 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (1.0ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (7.0ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (3.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (4.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (61.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (165.49ms)
Completed 200 OK in 267ms (Views: 165.1ms | ActiveRecord: 94.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:33:10 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.0ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (4.5ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (42.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (106.84ms)
Completed 200 OK in 233ms (Views: 165.7ms | ActiveRecord: 56.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:36:02 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (3.72ms)
Completed 500 Internal Server Error in 102ms (ActiveRecord: 2.6ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003f57f00 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (5.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (16.3ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:36:17 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (1.3ms)
Completed 500 Internal Server Error in 80ms (ActiveRecord: 1.4ms)

NoMethodError (undefined method `player_id' for #<PlayerStatistic:0x00000002f5ec70 @player_id=2>):
  app/serializers/player_statistic_serializer.rb:5:in `player_id'
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (6.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (15.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:36:39 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (13.4ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.3ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (83.7ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (170416.8ms)
Completed 200 OK in 174952ms (Views: 170467.2ms | ActiveRecord: 111.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:42:35 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (3.65ms)
Completed 500 Internal Server Error in 173ms (ActiveRecord: 4.4ms)

NoMethodError (undefined method `read_attribute_for_serialization' for #<PlayerStatistic:0x00000003876ce0 @player_id=2>):
  app/controllers/player_statistics_controller.rb:7:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (4.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (16.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:42:58 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (3.8ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (2.9ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (3.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (5.2ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (4.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (70.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (6277.45ms)
Completed 200 OK in 11063ms (Views: 6273.4ms | ActiveRecord: 104.9ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:43:43 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (3.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (31.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (87.04ms)
Completed 200 OK in 280ms (Views: 207.9ms | ActiveRecord: 50.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:46:33 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
Completed 500 Internal Server Error in 4ms (ActiveRecord: 0.0ms)

NameError (uninitialized constant ActiveModel::SerializerSupport):
  app/models/player_statistic.rb:2:in `<class:PlayerStatistic>'
  app/models/player_statistic.rb:1:in `<top (required)>'
  app/controllers/player_statistics_controller.rb:6:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (2.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (13.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:48:03 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (2.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.4ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (48.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (97.89ms)
Completed 200 OK in 193ms (Views: 120.5ms | ActiveRecord: 62.5ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:48:13 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (3.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (49.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (93.92ms)
Completed 200 OK in 192ms (Views: 126.8ms | ActiveRecord: 56.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:48:33 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (4.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (38.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (83.68ms)
Completed 200 OK in 194ms (Views: 142.0ms | ActiveRecord: 47.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-18 22:49:03 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (3.3ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (40.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (78.89ms)
Completed 200 OK in 182ms (Views: 128.2ms | ActiveRecord: 47.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-23 16:48:09 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (4.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (36.5ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (118.07ms)
Completed 200 OK in 231ms (Views: 147.6ms | ActiveRecord: 57.9ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-08-23 16:48:20 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"3"}
  [1m[36mUser Load (4.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 32]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 3
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (5.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 3
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (22.55ms)
Completed 200 OK in 29ms (Views: 12.9ms | ActiveRecord: 15.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-08-23 16:48:39 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (1.1ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (3.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.7ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (3.1ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (56.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.43ms)
Completed 200 OK in 82ms (Views: 8.4ms | ActiveRecord: 72.5ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players//statistics" for 127.0.0.1 at 2016-08-23 17:12:09 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"statistics"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 0]]
Completed 404 Not Found in 119ms (ActiveRecord: 4.1ms)

ActiveRecord::RecordNotFound (Couldn't find Player with 'id'=0):
  app/controllers/players_controller.rb:19:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (2.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (24.9ms)


Started GET "/players/0/statistics" for 127.0.0.1 at 2016-08-23 17:12:11 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"0"}
Completed 404 Not Found in 1ms (ActiveRecord: 0.0ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (6.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (40.9ms)


Started GET "/players/a/statistics" for 127.0.0.1 at 2016-08-23 17:12:15 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"a"}
Completed 404 Not Found in 3ms (ActiveRecord: 0.0ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (1.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (21.6ms)


Started GET "/players/999/statistics" for 127.0.0.1 at 2016-08-23 17:22:26 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"999"}
Completed 500 Internal Server Error in 10ms (ActiveRecord: 0.0ms)

NoMethodError (undefined method `exists' for #<Class:0x000000036443a0>
Did you mean?  exists?
               exit
               exit!):
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_source.erb (2.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/diagnostics.html.erb within rescues/layout (11.2ms)


Started GET "/players/999/statistics" for 127.0.0.1 at 2016-08-23 17:22:44 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"999"}
  [1m[35mPlayer Exists (0.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 999]]
Completed 404 Not Found in 25ms (ActiveRecord: 1.1ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (10.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (1.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (3.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (60.3ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-23 17:22:58 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (6.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (0.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.3ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (59.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (105.11ms)
Completed 200 OK in 260ms (Views: 173.8ms | ActiveRecord: 76.1ms)


Started GET "/players/99/statistics" for 127.0.0.1 at 2016-08-23 17:23:01 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"99"}
  [1m[36mPlayer Exists (4.1ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 99]]
Completed 404 Not Found in 5ms (ActiveRecord: 4.1ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (29.8ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/99/statistics" for 127.0.0.1 at 2016-08-23 17:23:22 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"99"}
  [1m[35mPlayer Exists (0.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 99]]
Completed 404 Not Found in 16399ms (ActiveRecord: 11.6ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (14.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (20.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (11.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (127.2ms)


Started GET "/players/99/statistics" for 127.0.0.1 at 2016-08-23 17:23:53 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"99"}
  [1m[36mPlayer Exists (1.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 99]]
Completed 404 Not Found in 6628ms (ActiveRecord: 1.4ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (7.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (16.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (1.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (2.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (88.2ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 17:44:28 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 200ms (Views: 1.3ms | ActiveRecord: 8.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-23 17:44:35 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (5.1ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.55ms)
Completed 200 OK in 27ms (Views: 3.7ms | ActiveRecord: 6.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 17:44:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.4ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.27ms)
Completed 200 OK in 10ms (Views: 2.8ms | ActiveRecord: 1.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 17:44:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 0.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 17:55:17 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (4.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 4.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-08-23 17:57:09 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (4.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (1.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (3.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (38.5ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (103.15ms)
Completed 200 OK in 130ms (Views: 37.7ms | ActiveRecord: 71.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:20:51 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (3.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 6ms (Views: 1.0ms | ActiveRecord: 3.9ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:20:51 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (4.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 4.7ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:20:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:21:14 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (3.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 3.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:21:19 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 6ms (Views: 3.5ms | ActiveRecord: 0.7ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:21:19 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (2.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:21:19 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (1.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:24:18 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:24:22 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:24:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:24:23 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:33:30 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:33:38 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:33:42 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:33:42 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (2.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:33:42 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (5.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (1.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 11ms (Views: 0.4ms | ActiveRecord: 6.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-23 18:40:27 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:40:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.4ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-23 18:40:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 15:46:04 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:46:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (1.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.6ms | ActiveRecord: 2.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:46:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (4.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (3.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 7.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 15:48:35 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:48:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (3.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:48:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 15:50:27 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (4.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 4.9ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:50:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.1ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:50:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 15:50:39 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 15:50:46 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:50:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.4ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:50:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 15:51:04 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (6.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 6.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:51:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (10.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 12ms (Views: 0.4ms | ActiveRecord: 10.3ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 15:51:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.7ms | ActiveRecord: 2.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:03:30 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 1.1ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:03:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:03:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (5.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (3.4ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 11ms (Views: 0.4ms | ActiveRecord: 8.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:03:49 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.3ms | ActiveRecord: 1.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:04:11 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (3.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 3.9ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:04:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (1.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (3.4ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:04:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (1.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:06:29 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (7.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 7.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:06:29 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (4.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.4ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:06:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (3.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.19ms)
Completed 200 OK in 9ms (Views: 0.7ms | ActiveRecord: 6.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:06:42 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:06:45 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (4.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 4.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:06:45 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (1.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:06:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:07:23 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (7.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 7.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:07:23 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:07:23 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:07:40 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:07:44 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:07:44 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-08-26 16:07:44 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:07:55 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-26 16:07:57 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (4.1ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 13ms (Views: 0.7ms | ActiveRecord: 6.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-08-26 16:07:58 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-08-26 16:07:58 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:08:28 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 1.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:08:50 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 1.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-26 16:08:51 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (1.6ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.32ms)
Completed 200 OK in 5ms (Views: 0.7ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-08-26 16:08:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-08-26 16:08:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:10:05 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (3.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 3.0ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-26 16:10:06 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.35ms)
Completed 200 OK in 5ms (Views: 1.1ms | ActiveRecord: 2.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:10:29 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (3.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 3.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:10:41 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:12:43 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:17:10 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.1ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-26 16:17:13 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[35mPlayer Load (2.6ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.31ms)
Completed 200 OK in 9ms (Views: 2.0ms | ActiveRecord: 4.9ms)


Started GET "/routes" for 127.0.0.1 at 2016-08-26 16:28:15 -0700

ActionController::RoutingError (No route matches [GET] "/routes"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/methodoverride.rb:22:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack (1.6.4) lib/rack/sendfile.rb:113:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'
  /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (21.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (72.0ms)


Started GET "/" for 127.0.0.1 at 2016-08-26 16:28:15 -0700
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-08-26 16:29:31 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (4.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 4.3ms)


Started GET "/players/list" for 127.0.0.1 at 2016-08-26 16:29:35 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (4.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (7.8ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.8ms)
Completed 200 OK in 15ms (Views: 1.2ms | ActiveRecord: 12.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-08-26 16:29:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (2.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-08-26 16:29:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-11 18:15:29 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (3.8ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.9ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"VLHtnM0D3Ta40Hfj7w_iRw\":{\"token\":\"$2a$10$JlWnXq8ScuWQklta9aMu0ezXtZC1ehmEEZC.qewlW5Hfiosmjgcei\",\"expiry\":1477444530}}"], ["uid", "1e0192b2-1018-4786-96fd-8c64c2c0da38"], ["confirmed_at", "2016-10-12 01:15:30.166011"], ["updated_at", "2016-10-12 01:15:30.166220"], ["id", 1]]
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (1.2ms)[0m  [1mUPDATE "users" SET "current_sign_in_at" = $1, "sign_in_count" = $2, "uid" = $3, "confirmed_at" = $4, "updated_at" = $5 WHERE "users"."id" = $6[0m  [["current_sign_in_at", "2016-10-12 01:15:30.182257"], ["sign_in_count", 2], ["uid", "cd8c72a6-2341-42a4-a213-5106166ed4ef"], ["confirmed_at", "2016-10-12 01:15:30.183168"], ["updated_at", "2016-10-12 01:15:30.183316"], ["id", 1]]
  [1m[35m (0.9ms)[0m  COMMIT
Completed 200 OK in 281ms (Views: 2.7ms | ActiveRecord: 17.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-11 18:15:35 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "cd8c72a6-2341-42a4-a213-5106166ed4ef"]]
  [1m[35mPlayer Load (3.6ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.62ms)
Completed 200 OK in 172ms (Views: 1.2ms | ActiveRecord: 4.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-11 18:15:38 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "cd8c72a6-2341-42a4-a213-5106166ed4ef"]]
  [1m[35mPlayer Load (0.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.29ms)
Completed 200 OK in 12ms (Views: 5.6ms | ActiveRecord: 4.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-11 18:15:38 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "cd8c72a6-2341-42a4-a213-5106166ed4ef"]]
  [1m[35mPlayer Load (2.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 14:55:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.5ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-15 14:55:42 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36mUser Load (3.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"VLHtnM0D3Ta40Hfj7w_iRw\":{\"token\":\"$2a$10$JlWnXq8ScuWQklta9aMu0ezXtZC1ehmEEZC.qewlW5Hfiosmjgcei\",\"expiry\":1477444530},\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142}}"], ["uid", "646f1d2d-6191-43da-af95-7ff77c3c9085"], ["confirmed_at", "2016-10-15 21:55:42.777901"], ["updated_at", "2016-10-15 21:55:42.778167"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.4ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-12 01:15:30.182257"], ["current_sign_in_at", "2016-10-15 21:55:42.781019"], ["sign_in_count", 3], ["uid", "01079e68-3199-4e5a-833b-ea36558631d8"], ["confirmed_at", "2016-10-15 21:55:42.781647"], ["updated_at", "2016-10-15 21:55:42.781845"], ["id", 1]]
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 173ms (Views: 0.3ms | ActiveRecord: 6.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 14:55:44 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (3.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 133ms (Views: 0.7ms | ActiveRecord: 3.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 14:55:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (4.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 5.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 14:55:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:01:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:01:27 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:01:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:02:27 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (4.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:02:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:02:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:02:28 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (1.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (8.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (5.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (3.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (5.0ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (53.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (124.82ms)
Completed 200 OK in 170ms (Views: 37.2ms | ActiveRecord: 98.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:03:14 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (5.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 5.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:03:14 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 19ms (Views: 0.6ms | ActiveRecord: 0.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:03:15 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 15ms (Views: 0.4ms | ActiveRecord: 1.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:03:15 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.9ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.3ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (75.8ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (96.21ms)
Completed 200 OK in 102ms (Views: 8.8ms | ActiveRecord: 91.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:05:32 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:05:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:05:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (5.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 8ms (Views: 0.4ms | ActiveRecord: 6.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:05:32 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (5.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (75.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (88.1ms)
Completed 200 OK in 95ms (Views: 5.9ms | ActiveRecord: 88.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:06:00 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:06:00 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:06:00 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (2.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:06:01 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (6.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (50.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (70.18ms)
Completed 200 OK in 78ms (Views: 7.0ms | ActiveRecord: 65.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:11:02 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "cd8c72a6-2341-42a4-a213-5106166ed4ef"]]
Completed 401 Unauthorized in 36ms (Views: 0.3ms | ActiveRecord: 1.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:11:07 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:11:07 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:11:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-15 15:19:34 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mGame Load (2.8ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (6.09ms)
Completed 200 OK in 17ms (Views: 7.7ms | ActiveRecord: 4.0ms)


Started GET "/games/17" for 127.0.0.1 at 2016-10-15 15:19:40 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"17"}
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 17]]
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '17')[0m
[active_model_serializers]   [1m[35mSession Load (3.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (3.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (17.41ms)
Completed 200 OK in 27ms (Views: 9.6ms | ActiveRecord: 10.7ms)


Started GET "/games/17" for 127.0.0.1 at 2016-10-15 15:19:40 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"17"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 17]]
  [1m[35m (3.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '17')
[active_model_serializers]   [1m[36mSession Load (0.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (1.7ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (5.59ms)
Completed 200 OK in 13ms (Views: 3.4ms | ActiveRecord: 7.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 15:21:08 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.0ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.43ms)
Completed 200 OK in 5ms (Views: 0.8ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:21:10 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:21:10 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.27ms)
Completed 200 OK in 5ms (Views: 0.6ms | ActiveRecord: 0.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:22:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:22:22 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 2.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:22:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (5.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 11ms (Views: 0.4ms | ActiveRecord: 6.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:22:23 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (0.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (3.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (61.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (80.49ms)
Completed 200 OK in 88ms (Views: 8.1ms | ActiveRecord: 74.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:25:56 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 5ms (Views: 1.6ms | ActiveRecord: 1.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:25:56 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 7ms (Views: 0.7ms | ActiveRecord: 4.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:25:57 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 9ms (Views: 1.0ms | ActiveRecord: 3.5ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:25:57 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (12.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (5.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.8ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (6.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (60.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (94.82ms)
Completed 200 OK in 111ms (Views: 11.5ms | ActiveRecord: 98.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:26:40 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:26:40 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.26ms)
Completed 200 OK in 4ms (Views: 1.1ms | ActiveRecord: 0.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:26:41 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:26:41 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (1.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (66.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (84.48ms)
Completed 200 OK in 89ms (Views: 8.9ms | ActiveRecord: 78.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:27:14 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:27:14 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:27:14 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (9.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 12ms (Views: 0.4ms | ActiveRecord: 9.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:27:15 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (1.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (64.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.94ms)
Completed 200 OK in 82ms (Views: 5.7ms | ActiveRecord: 75.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:28:21 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:28:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:28:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (9.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (2.29ms)
Completed 200 OK in 17ms (Views: 2.7ms | ActiveRecord: 12.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:28:22 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (1.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.1ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (77.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (90.94ms)
Completed 200 OK in 96ms (Views: 5.9ms | ActiveRecord: 89.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:28:53 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:28:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:28:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 13ms (Views: 0.4ms | ActiveRecord: 0.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:28:54 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (48.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (65.33ms)
Completed 200 OK in 70ms (Views: 6.4ms | ActiveRecord: 62.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 15:29:06 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:29:06 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 15:29:06 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (6.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 7.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 15:29:06 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (6.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (4.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (5.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.5ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (61.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (85.6ms)
Completed 200 OK in 96ms (Views: 6.0ms | ActiveRecord: 88.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 20:49:29 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:49:29 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:49:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.4ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:49:30 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (3.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.3ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.0ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (60.5ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (76.83ms)
Completed 200 OK in 86ms (Views: 8.6ms | ActiveRecord: 76.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 20:50:04 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (5.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 5.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:50:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:50:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:50:04 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (2.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (64.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (80.69ms)
Completed 200 OK in 86ms (Views: 6.1ms | ActiveRecord: 78.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 20:50:38 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:50:38 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (2.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 6ms (Views: 1.0ms | ActiveRecord: 3.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:50:38 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (7.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 7.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:50:38 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (1.8ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.8ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (70.8ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (86.0ms)
Completed 200 OK in 91ms (Views: 6.2ms | ActiveRecord: 83.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 20:51:53 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:51:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:51:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:51:53 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (1.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (3.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (8.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (4.1ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (77.9ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (111.35ms)
Completed 200 OK in 116ms (Views: 9.0ms | ActiveRecord: 106.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 20:53:39 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (4.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 4.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:53:39 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:53:39 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (2.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 8ms (Views: 0.5ms | ActiveRecord: 2.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:53:40 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (1.8ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.8ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (51.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (76.08ms)
Completed 200 OK in 84ms (Views: 14.3ms | ActiveRecord: 64.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 20:54:10 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:54:10 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.19ms)
Completed 200 OK in 6ms (Views: 0.8ms | ActiveRecord: 1.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:54:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:54:11 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (7.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (3.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (4.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (4.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.2ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (70.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (99.88ms)
Completed 200 OK in 109ms (Views: 10.5ms | ActiveRecord: 97.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 20:55:26 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.32ms)
Completed 200 OK in 7ms (Views: 0.8ms | ActiveRecord: 4.3ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-15 20:55:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (4.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 4.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-15 20:55:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-15 20:55:27 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (5.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (3.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (7.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (67.6ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (97.03ms)
Completed 200 OK in 105ms (Views: 14.1ms | ActiveRecord: 89.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 20:55:29 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.34ms)
Completed 200 OK in 5ms (Views: 0.7ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:55:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:55:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:55:30 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (10.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.6ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (79.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (107.68ms)
Completed 200 OK in 114ms (Views: 6.7ms | ActiveRecord: 105.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 20:55:31 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.18ms)
Completed 200 OK in 7ms (Views: 2.7ms | ActiveRecord: 2.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:55:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (1.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:55:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (2.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:55:32 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (1.0ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (78.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (95.58ms)
Completed 200 OK in 101ms (Views: 5.8ms | ActiveRecord: 93.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 20:55:34 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.32ms)
Completed 200 OK in 5ms (Views: 0.7ms | ActiveRecord: 3.0ms)


Started GET "/players/4" for 127.0.0.1 at 2016-10-15 20:55:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 14ms (Views: 0.5ms | ActiveRecord: 1.3ms)


Started GET "/players/4" for 127.0.0.1 at 2016-10-15 20:55:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.0ms)


Started GET "/players/4/statistics" for 127.0.0.1 at 2016-10-15 20:55:35 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[35mPlayer Exists (3.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (2.0ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 4)
[active_model_serializers]   [1m[36mGame Load (4.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 15]]
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 10]]
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 4
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (10.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 4
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (31.65ms)
Completed 200 OK in 46ms (Views: 15.1ms | ActiveRecord: 25.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 20:55:37 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (3.1ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.45ms)
Completed 200 OK in 10ms (Views: 1.4ms | ActiveRecord: 5.4ms)


Started GET "/players/5" for 127.0.0.1 at 2016-10-15 20:55:40 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.9ms)


Started GET "/players/5" for 127.0.0.1 at 2016-10-15 20:55:40 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[35mUser Load (3.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (1.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.2ms)


Started GET "/players/5/statistics" for 127.0.0.1 at 2016-10-15 20:55:40 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[35mPlayer Exists (5.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (3.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 5)
[active_model_serializers]   [1m[36mGame Load (4.1ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 41]]
[active_model_serializers]   [1m[36mGame Load (8.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 41]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (5.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 5
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (1.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 5
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (40.19ms)
Completed 200 OK in 53ms (Views: 16.4ms | ActiveRecord: 36.0ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 20:55:42 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.3ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:58:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 20:58:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 20:58:21 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (3.1ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (68.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (83.14ms)
Completed 200 OK in 88ms (Views: 5.9ms | ActiveRecord: 80.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:00:34 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:00:34 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:00:34 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (8.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 10ms (Views: 0.3ms | ActiveRecord: 8.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:00:35 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (3.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.3ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (47.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (63.49ms)
Completed 200 OK in 69ms (Views: 5.9ms | ActiveRecord: 61.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:00:41 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.94ms)
Completed 200 OK in 5ms (Views: 1.3ms | ActiveRecord: 1.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-15 21:00:42 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-15 21:00:42 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 2ms (Views: 0.6ms | ActiveRecord: 0.3ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-15 21:00:42 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (1.8ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (1.8ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (3.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.0ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (62.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (76.49ms)
Completed 200 OK in 80ms (Views: 5.5ms | ActiveRecord: 73.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:01:02 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 2.1ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-15 21:01:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mUser Load (2.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 3.7ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-15 21:01:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.6ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-10-15 21:01:04 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mPlayer Exists (0.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
  [1m[35mUser Load (8.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (3.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)[0m
[active_model_serializers]   [1m[35mGame Load (3.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 32]]
[active_model_serializers]   [1m[35mSessionPlayer Load (5.0ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 3
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (3.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 3
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (23.86ms)
Completed 200 OK in 35ms (Views: 5.8ms | ActiveRecord: 28.1ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:01:27 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (4.7ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.54ms)
Completed 200 OK in 12ms (Views: 3.9ms | ActiveRecord: 6.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:01:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:01:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.9ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:01:28 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.0ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (71.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (90.94ms)
Completed 200 OK in 96ms (Views: 7.2ms | ActiveRecord: 87.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:06:39 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-15 21:06:39 -0700
Processing by GamesController#list as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mGame Load (3.1ms)[0m  [1mSELECT "games".* FROM "games"  ORDER BY name[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.77ms)
Completed 200 OK in 9ms (Views: 3.2ms | ActiveRecord: 3.3ms)


Started GET "/games/17" for 127.0.0.1 at 2016-10-15 21:06:41 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"17"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 17]]
  [1m[35m (3.7ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '17')
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (2.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (6.17ms)
Completed 200 OK in 15ms (Views: 3.8ms | ActiveRecord: 8.7ms)


Started GET "/games/17" for 127.0.0.1 at 2016-10-15 21:06:41 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"17"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 17]]
  [1m[36m (0.4ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '17')[0m
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (0.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 17) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (6.45ms)
Completed 200 OK in 13ms (Views: 5.7ms | ActiveRecord: 5.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:17:04 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:17:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:17:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (14.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 16ms (Views: 0.4ms | ActiveRecord: 14.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:17:05 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (1.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (1.8ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.7ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.0ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (51.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (65.9ms)
Completed 200 OK in 71ms (Views: 8.5ms | ActiveRecord: 61.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:17:34 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:17:34 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (1.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:17:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:17:35 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (1.6ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (1.2ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.4ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (71.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (86.6ms)
Completed 200 OK in 90ms (Views: 5.5ms | ActiveRecord: 83.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:17:56 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (3.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:17:56 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:17:57 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:17:57 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (4.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (4.0ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (65.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (89.62ms)
Completed 200 OK in 98ms (Views: 6.3ms | ActiveRecord: 88.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:19:10 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:19:10 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:19:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:19:11 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.8ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (62.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (76.22ms)
Completed 200 OK in 83ms (Views: 5.7ms | ActiveRecord: 76.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:20:12 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.3ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:20:12 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (6.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 9ms (Views: 0.5ms | ActiveRecord: 7.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:20:13 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (3.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 5.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:20:13 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (1.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (3.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.5ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (67.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (113.53ms)
Completed 200 OK in 119ms (Views: 30.6ms | ActiveRecord: 87.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:20:52 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:20:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (9.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 14ms (Views: 0.5ms | ActiveRecord: 9.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:20:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:20:52 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (4.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (2.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (4.1ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (5.4ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (53.9ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (72.21ms)
Completed 200 OK in 82ms (Views: 5.5ms | ActiveRecord: 74.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:23:11 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:23:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.17ms)
Completed 200 OK in 5ms (Views: 0.6ms | ActiveRecord: 3.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:23:12 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:23:12 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (5.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (5.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (74.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (95.67ms)
Completed 200 OK in 104ms (Views: 6.2ms | ActiveRecord: 97.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:27:09 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:27:09 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:27:09 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (5.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 7.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:27:10 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (0.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (56.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (72.24ms)
Completed 200 OK in 78ms (Views: 8.8ms | ActiveRecord: 64.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:27:31 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:27:31 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:27:31 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:27:32 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.7ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (3.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (4.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.1ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (62.8ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (85.09ms)
Completed 200 OK in 95ms (Views: 6.3ms | ActiveRecord: 83.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:27:52 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 12ms (Views: 7.8ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:27:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.9ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:27:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 5.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:27:52 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (1.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (2.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (3.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (78.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (95.4ms)
Completed 200 OK in 103ms (Views: 6.7ms | ActiveRecord: 91.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:28:10 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:28:10 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (6.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 9ms (Views: 0.5ms | ActiveRecord: 7.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:28:10 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:28:10 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (54.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (67.81ms)
Completed 200 OK in 75ms (Views: 6.2ms | ActiveRecord: 66.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:28:47 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:28:47 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:28:47 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (2.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:28:47 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (10.6ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (62.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (70.7ms)
Completed 200 OK in 85ms (Views: 5.3ms | ActiveRecord: 78.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:29:16 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (6.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 9ms (Views: 0.6ms | ActiveRecord: 6.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:29:16 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (7.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 10ms (Views: 0.6ms | ActiveRecord: 7.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:29:16 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (9.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 12ms (Views: 0.4ms | ActiveRecord: 10.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:29:16 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (1.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (3.8ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (67.0ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (86.03ms)
Completed 200 OK in 92ms (Views: 7.0ms | ActiveRecord: 83.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:30:08 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (5.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 5.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:30:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 2.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:30:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:30:08 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (6.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (8.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (10.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (61.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (92.15ms)
Completed 200 OK in 105ms (Views: 9.0ms | ActiveRecord: 95.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:30:21 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:30:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:30:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 3.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:30:22 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.1ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (6.4ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (10.7ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (62.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (105.43ms)
Completed 200 OK in 108ms (Views: 18.9ms | ActiveRecord: 87.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:31:51 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:31:51 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:31:51 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.9ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:31:51 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (2.2ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.6ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (63.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (81.23ms)
Completed 200 OK in 86ms (Views: 6.5ms | ActiveRecord: 78.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:32:03 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:32:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (3.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:32:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (5.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (0.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 5.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:32:04 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (74.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (88.9ms)
Completed 200 OK in 96ms (Views: 9.1ms | ActiveRecord: 86.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:35:52 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 4ms (Views: 0.3ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:35:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 3.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:35:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (1.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:35:53 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (6.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (1.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (63.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (85.05ms)
Completed 200 OK in 97ms (Views: 14.7ms | ActiveRecord: 80.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:39:00 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:39:00 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (3.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:39:00 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (9.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 13ms (Views: 0.4ms | ActiveRecord: 10.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:39:00 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.1ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (20.7ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.1ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (57.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (94.26ms)
Completed 200 OK in 97ms (Views: 8.7ms | ActiveRecord: 86.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:39:21 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 200 OK in 5ms (Views: 0.8ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:39:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (7.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 7.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:39:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (5.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 8ms (Views: 0.5ms | ActiveRecord: 6.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:39:21 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.6ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
[active_model_serializers]   [1m[35m (2.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (78.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (97.69ms)
Completed 200 OK in 103ms (Views: 7.5ms | ActiveRecord: 94.6ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-15 21:39:43 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (4.2ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (6.3ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"VLHtnM0D3Ta40Hfj7w_iRw\":{\"token\":\"$2a$10$JlWnXq8ScuWQklta9aMu0ezXtZC1ehmEEZC.qewlW5Hfiosmjgcei\",\"expiry\":1477444530},\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383}}"], ["uid", "439b2d02-e33f-4a27-83ee-793142959115"], ["confirmed_at", "2016-10-16 04:39:43.703665"], ["updated_at", "2016-10-16 04:39:43.714974"], ["id", 1]]
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (2.8ms)[0m  BEGIN
  [1m[36mSQL (4.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-15 21:55:42.781019"], ["current_sign_in_at", "2016-10-16 04:39:43.733330"], ["sign_in_count", 4], ["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"], ["confirmed_at", "2016-10-16 04:39:43.738198"], ["updated_at", "2016-10-16 04:39:43.738425"], ["id", 1]]
  [1m[35m (3.2ms)[0m  COMMIT
Completed 200 OK in 246ms (Views: 0.3ms | ActiveRecord: 23.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:39:46 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.8ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.45ms)
Completed 200 OK in 132ms (Views: 0.9ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:39:48 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:39:48 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.26ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:39:48 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (1.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.0ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.1ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (75.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (92.81ms)
Completed 200 OK in 97ms (Views: 6.3ms | ActiveRecord: 89.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:41:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.27ms)
Completed 200 OK in 2ms (Views: 0.7ms | ActiveRecord: 0.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:41:08 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (3.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 3.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:41:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 3.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:41:09 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (5.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (4.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (62.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (83.9ms)
Completed 200 OK in 88ms (Views: 7.6ms | ActiveRecord: 79.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:41:22 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:41:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:41:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:41:22 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.8ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (1.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.8ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.0ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (88.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (109.62ms)
Completed 200 OK in 121ms (Views: 12.3ms | ActiveRecord: 104.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:41:44 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (3.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 10ms (Views: 0.7ms | ActiveRecord: 3.2ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:41:45 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (2.0ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:41:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:41:46 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:41:46 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (1.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (1.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (79.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (97.63ms)
Completed 200 OK in 103ms (Views: 6.5ms | ActiveRecord: 94.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:44:53 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:44:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (1.03ms)
Completed 200 OK in 7ms (Views: 1.4ms | ActiveRecord: 1.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:44:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:44:54 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (65.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (92.07ms)
Completed 200 OK in 104ms (Views: 18.0ms | ActiveRecord: 81.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:45:04 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:45:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 3.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:45:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (4.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 8ms (Views: 2.2ms | ActiveRecord: 4.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:45:05 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.0ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (65.9ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (90.11ms)
Completed 200 OK in 96ms (Views: 20.1ms | ActiveRecord: 74.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:46:32 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:46:34 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (2.2ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.48ms)
Completed 200 OK in 8ms (Views: 2.8ms | ActiveRecord: 3.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:46:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:46:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (2.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:46:35 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (1.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (1.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (3.9ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (3.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (82.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (106.72ms)
Completed 200 OK in 113ms (Views: 11.5ms | ActiveRecord: 99.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:47:05 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 1.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:47:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:47:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (7.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 7.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:47:06 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (1.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (4.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (2.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (59.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (73.21ms)
Completed 200 OK in 83ms (Views: 7.6ms | ActiveRecord: 74.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:47:15 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:47:15 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (3.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.35ms)
Completed 200 OK in 6ms (Views: 1.3ms | ActiveRecord: 3.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:47:15 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:47:15 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (2.8ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (76.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (94.95ms)
Completed 200 OK in 100ms (Views: 8.0ms | ActiveRecord: 90.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:47:52 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 6ms (Views: 0.3ms | ActiveRecord: 1.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:47:54 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:47:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 6ms (Views: 0.6ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:47:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (3.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 11ms (Views: 0.4ms | ActiveRecord: 6.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:47:55 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (1.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.4ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (9.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (75.7ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (107.04ms)
Completed 200 OK in 113ms (Views: 13.2ms | ActiveRecord: 99.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:48:56 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (4.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 7ms (Views: 0.2ms | ActiveRecord: 4.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:48:58 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 9ms (Views: 0.2ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:48:58 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.4ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.5ms | ActiveRecord: 0.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:48:58 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (2.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 9ms (Views: 0.4ms | ActiveRecord: 6.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:48:58 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (2.1ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (3.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (3.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (73.7ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (113.42ms)
Completed 200 OK in 118ms (Views: 25.7ms | ActiveRecord: 91.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:53:49 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:53:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.17ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 3.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:53:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 8ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:53:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (4.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (2.1ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.1ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (63.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (101.96ms)
Completed 200 OK in 111ms (Views: 28.8ms | ActiveRecord: 81.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:54:16 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:16 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (6.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 10ms (Views: 0.5ms | ActiveRecord: 7.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:17 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (2.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 7.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:54:17 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.9ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.6ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (81.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (101.73ms)
Completed 200 OK in 108ms (Views: 11.6ms | ActiveRecord: 95.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:54:24 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (4.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 7ms (Views: 0.3ms | ActiveRecord: 4.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:54:27 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (6.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 6.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:27 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (5.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (1.86ms)
Completed 200 OK in 10ms (Views: 2.2ms | ActiveRecord: 6.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:54:27 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (68.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (87.49ms)
Completed 200 OK in 98ms (Views: 10.9ms | ActiveRecord: 80.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:54:37 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (4.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 8ms (Views: 0.5ms | ActiveRecord: 5.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (2.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.22ms)
Completed 200 OK in 8ms (Views: 0.5ms | ActiveRecord: 5.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:54:38 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.4ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (2.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (2.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.8ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (66.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (106.54ms)
Completed 200 OK in 121ms (Views: 30.2ms | ActiveRecord: 85.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:54:50 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 1.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:50 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (5.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 7ms (Views: 0.6ms | ActiveRecord: 5.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:54:50 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (9.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[35mPlayer Load (2.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.6ms)
Completed 200 OK in 15ms (Views: 1.8ms | ActiveRecord: 11.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:54:50 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[36m (2.0ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (77.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (95.45ms)
Completed 200 OK in 100ms (Views: 8.6ms | ActiveRecord: 88.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:55:02 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 200 OK in 4ms (Views: 0.3ms | ActiveRecord: 1.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:55:02 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (1.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 6ms (Views: 0.6ms | ActiveRecord: 4.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:55:02 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 0.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:55:03 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.4ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
[active_model_serializers]   [1m[35m (2.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (59.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.47ms)
Completed 200 OK in 82ms (Views: 9.1ms | ActiveRecord: 72.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:58:49 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Completed 401 Unauthorized in 5ms (Views: 0.9ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:58:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "01079e68-3199-4e5a-833b-ea36558631d8"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 6ms (Views: 0.2ms | ActiveRecord: 2.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-15 21:58:58 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36m (0.6ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (4.7ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"VLHtnM0D3Ta40Hfj7w_iRw\":{\"token\":\"$2a$10$JlWnXq8ScuWQklta9aMu0ezXtZC1ehmEEZC.qewlW5Hfiosmjgcei\",\"expiry\":1477444530},\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538}}"], ["uid", "894757b6-3a5c-4b2d-ac92-cd9a09788dd3"], ["confirmed_at", "2016-10-16 04:58:58.458464"], ["updated_at", "2016-10-16 04:58:58.460590"], ["id", 1]]
  [1m[36m (1.4ms)[0m  [1mCOMMIT[0m
  [1m[35m (5.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-16 04:39:43.733330"], ["current_sign_in_at", "2016-10-16 04:58:58.505573"], ["sign_in_count", 5], ["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"], ["confirmed_at", "2016-10-16 04:58:58.517020"], ["updated_at", "2016-10-16 04:58:58.517697"], ["id", 1]]
  [1m[35m (2.4ms)[0m  COMMIT
Completed 200 OK in 385ms (Views: 0.3ms | ActiveRecord: 16.2ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 21:58:59 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (2.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.68ms)
Completed 200 OK in 122ms (Views: 1.0ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:59:00 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (4.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.66ms)
Completed 200 OK in 12ms (Views: 1.0ms | ActiveRecord: 9.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:59:00 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 12ms (Views: 5.4ms | ActiveRecord: 2.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:59:01 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (8.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.9ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (59.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (91.45ms)
Completed 200 OK in 105ms (Views: 25.1ms | ActiveRecord: 75.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:59:11 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:59:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 21:59:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 1.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 21:59:11 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (0.7ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.8ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.4ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (72.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (88.33ms)
Completed 200 OK in 93ms (Views: 8.3ms | ActiveRecord: 83.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 21:59:50 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "977a212c-7d1f-4bd1-b7da-1e3a018e8ae0"]]
Completed 401 Unauthorized in 3ms (Views: 1.9ms | ActiveRecord: 0.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:00:31 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:00:31 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (1.32ms)
Completed 200 OK in 6ms (Views: 1.7ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:00:31 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:00:31 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (76.6ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (91.31ms)
Completed 200 OK in 98ms (Views: 10.8ms | ActiveRecord: 85.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:07:14 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 3ms (Views: 0.2ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:07:15 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.21ms)
Completed 200 OK in 9ms (Views: 2.6ms | ActiveRecord: 5.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:07:15 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:07:15 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (2.8ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (54.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (74.64ms)
Completed 200 OK in 80ms (Views: 10.8ms | ActiveRecord: 65.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:07:59 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:07:59 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 7ms (Views: 0.6ms | ActiveRecord: 5.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:07:59 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.09ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.5ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:07:59 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (2.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.1ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (79.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (100.69ms)
Completed 200 OK in 106ms (Views: 10.7ms | ActiveRecord: 93.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:11:49 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:11:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:11:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.9ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:11:50 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.1ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.8ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.5ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (60.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.66ms)
Completed 200 OK in 84ms (Views: 6.6ms | ActiveRecord: 75.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:13:09 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:13:09 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (10.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 13ms (Views: 0.5ms | ActiveRecord: 10.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:13:09 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:13:09 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (1.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (3.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (70.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (89.45ms)
Completed 200 OK in 96ms (Views: 6.3ms | ActiveRecord: 88.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:14:07 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 5ms (Views: 0.3ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:14:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (8.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 11ms (Views: 0.5ms | ActiveRecord: 8.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:14:08 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (10.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 14ms (Views: 0.4ms | ActiveRecord: 12.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:14:08 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (0.7ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (3.3ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (3.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.9ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (63.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (99.13ms)
Completed 200 OK in 107ms (Views: 15.6ms | ActiveRecord: 90.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:15:56 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (3.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 5ms (Views: 0.3ms | ActiveRecord: 3.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:15:56 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:15:56 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:15:56 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (1.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (6.6ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (61.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (82.09ms)
Completed 200 OK in 87ms (Views: 6.3ms | ActiveRecord: 79.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:17:25 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:17:25 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 0.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:17:25 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 4.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:17:26 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (2.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (76.0ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (89.3ms)
Completed 200 OK in 95ms (Views: 5.6ms | ActiveRecord: 85.1ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 22:18:31 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.5ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.32ms)
Completed 200 OK in 13ms (Views: 0.8ms | ActiveRecord: 4.3ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-15 22:18:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.9ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-15 22:18:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (2.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.9ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-15 22:18:32 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (2.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (4.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (1.0ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (4.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (3.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (3.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.0ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (69.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (100.62ms)
Completed 200 OK in 114ms (Views: 18.6ms | ActiveRecord: 94.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 22:18:47 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.9ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.47ms)
Completed 200 OK in 7ms (Views: 0.8ms | ActiveRecord: 3.9ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-15 22:18:48 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.0ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-15 22:18:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-10-15 22:18:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[36mPlayer Exists (1.9ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (1.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)[0m
[active_model_serializers]   [1m[35mGame Load (4.3ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mGame Load (5.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 32]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.1ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 3
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (4.5ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 3
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (39.6ms)
Completed 200 OK in 44ms (Views: 16.3ms | ActiveRecord: 26.4ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 22:18:50 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (2.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.3ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.37ms)
Completed 200 OK in 7ms (Views: 1.6ms | ActiveRecord: 3.7ms)


Started GET "/players/4" for 127.0.0.1 at 2016-10-15 22:18:51 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.4ms)


Started GET "/players/4" for 127.0.0.1 at 2016-10-15 22:18:51 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.3ms)


Started GET "/players/4/statistics" for 127.0.0.1 at 2016-10-15 22:18:51 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[36mPlayer Exists (5.5ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (0.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 4)[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 15]]
[active_model_serializers]   [1m[35mGame Load (7.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 10]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.8ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 4
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (9.5ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 4
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (29.09ms)
Completed 200 OK in 39ms (Views: 7.6ms | ActiveRecord: 30.3ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 22:18:52 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.29ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 1.9ms)


Started GET "/players/5" for 127.0.0.1 at 2016-10-15 22:18:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[36mUser Load (1.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.2ms)


Started GET "/players/5" for 127.0.0.1 at 2016-10-15 22:18:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.2ms)


Started GET "/players/5/statistics" for 127.0.0.1 at 2016-10-15 22:18:53 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[36mPlayer Exists (2.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (3.7ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 5)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 41]]
[active_model_serializers]   [1m[35mGame Load (6.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 41]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 5
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (6.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 5
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (26.25ms)
Completed 200 OK in 31ms (Views: 5.9ms | ActiveRecord: 23.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-15 22:18:55 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.32ms)
Completed 200 OK in 6ms (Views: 0.6ms | ActiveRecord: 2.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:20:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:20:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:20:05 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (6.1ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.9ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (66.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (75.35ms)
Completed 200 OK in 84ms (Views: 5.3ms | ActiveRecord: 77.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:23:21 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:23:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:23:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:23:21 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.6ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (1.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (3.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (61.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.73ms)
Completed 200 OK in 83ms (Views: 6.4ms | ActiveRecord: 75.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:37:55 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (3.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 6ms (Views: 0.2ms | ActiveRecord: 3.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:37:55 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:37:56 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-15 22:38:16 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (3.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 3.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:38:16 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (8.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 10ms (Views: 0.4ms | ActiveRecord: 8.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-15 22:38:16 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.5ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-15 22:38:16 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (4.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (2.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (60.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (76.57ms)
Completed 200 OK in 83ms (Views: 5.9ms | ActiveRecord: 75.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:19:55 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (20.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 136ms (Views: 1.3ms | ActiveRecord: 39.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:19:55 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.28ms)
Completed 200 OK in 31ms (Views: 3.5ms | ActiveRecord: 16.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:19:55 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (6.06ms)
Completed 200 OK in 16ms (Views: 6.5ms | ActiveRecord: 1.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:20:01 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.5ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.71ms)
Completed 200 OK in 12ms (Views: 2.8ms | ActiveRecord: 0.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:20:03 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (1.16ms)
Completed 200 OK in 8ms (Views: 1.5ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:20:03 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 1.9ms | ActiveRecord: 1.4ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-16 22:23:10 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (5.0ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (3.97ms)
Completed 200 OK in 36ms (Views: 14.1ms | ActiveRecord: 8.7ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-16 22:23:12 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 6]]
  [1m[36m (0.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')[0m
[active_model_serializers]   [1m[35mSession Load (0.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (0.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (20.26ms)
Completed 200 OK in 39ms (Views: 18.1ms | ActiveRecord: 4.5ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-16 22:23:13 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 6]]
  [1m[35m (7.7ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')
[active_model_serializers]   [1m[36mSession Load (7.3ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (0.8ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (14.98ms)
Completed 200 OK in 28ms (Views: 6.8ms | ActiveRecord: 16.6ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-16 22:23:14 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (3.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.8ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (3.78ms)
Completed 200 OK in 14ms (Views: 8.4ms | ActiveRecord: 3.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:23:17 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.6ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.54ms)
Completed 200 OK in 8ms (Views: 0.9ms | ActiveRecord: 4.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:23:18 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 1.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:23:18 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.7ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:23:57 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.2ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.03ms)
Completed 200 OK in 9ms (Views: 1.4ms | ActiveRecord: 5.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:23:59 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (8.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 11ms (Views: 0.4ms | ActiveRecord: 8.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:23:59 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.57ms)
Completed 200 OK in 6ms (Views: 0.9ms | ActiveRecord: 3.0ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:24:31 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (3.3ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.69ms)
Completed 200 OK in 10ms (Views: 3.2ms | ActiveRecord: 3.7ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:24:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (1.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 1.9ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:24:32 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 1.1ms | ActiveRecord: 0.8ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-16 22:40:58 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36mUser Load (4.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
Unpermitted parameter: session
Unpermitted parameter: session
Completed 401 Unauthorized in 106ms (Views: 3.0ms | ActiveRecord: 4.4ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-16 22:41:04 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
Completed 401 Unauthorized in 107ms (Views: 0.2ms | ActiveRecord: 0.5ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-16 22:41:08 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36mUser Load (4.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
Unpermitted parameter: session
Unpermitted parameter: session
Completed 401 Unauthorized in 103ms (Views: 0.2ms | ActiveRecord: 4.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-16 22:41:08 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
Completed 401 Unauthorized in 98ms (Views: 3.5ms | ActiveRecord: 0.5ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-16 22:41:52 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
Completed 401 Unauthorized in 163ms (Views: 1.5ms | ActiveRecord: 3.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:42:05 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 152ms (Views: 0.3ms | ActiveRecord: 0.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.28ms)
Completed 200 OK in 44ms (Views: 15.9ms | ActiveRecord: 2.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:05 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 0.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:42:06 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (1.4ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (1.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (3.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (57.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (120.29ms)
Completed 200 OK in 157ms (Views: 48.0ms | ActiveRecord: 81.1ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:42:16 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
  [1m[35m (2.6ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')
[active_model_serializers]   [1m[36mSession Load (3.7ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mSession Load (3.1ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (19.42ms)
Completed 200 OK in 28ms (Views: 12.4ms | ActiveRecord: 12.0ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:42:16 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
  [1m[36m (3.0ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')[0m
[active_model_serializers]   [1m[35mSession Load (0.6ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mSession Load (0.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (6.41ms)
Completed 200 OK in 15ms (Views: 3.7ms | ActiveRecord: 9.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:20 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:20 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:42:20 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (2.7ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.7ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (73.2ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (95.76ms)
Completed 200 OK in 114ms (Views: 12.6ms | ActiveRecord: 87.6ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:42:20 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (1.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
  [1m[35m (1.4ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')
[active_model_serializers]   [1m[36mSession Load (1.9ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (1.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mSession Load (1.6ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (14.53ms)
Completed 200 OK in 20ms (Views: 9.4ms | ActiveRecord: 8.4ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:42:21 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[36mUser Load (2.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
  [1m[36m (3.0ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')[0m
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mSession Load (1.2ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (7.41ms)
Completed 200 OK in 16ms (Views: 4.3ms | ActiveRecord: 9.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:23 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:42:23 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (1.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (65.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (82.11ms)
Completed 200 OK in 87ms (Views: 7.1ms | ActiveRecord: 79.0ms)


Started GET "/games/43" for 127.0.0.1 at 2016-10-16 22:42:47 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"43"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (1.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '43')
[active_model_serializers]   [1m[36mSession Load (1.2ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (2.8ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.49ms)
Completed 200 OK in 15ms (Views: 3.9ms | ActiveRecord: 8.7ms)


Started GET "/games/43" for 127.0.0.1 at 2016-10-16 22:42:47 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"43"}
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '43')[0m
[active_model_serializers]   [1m[35mSession Load (3.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (0.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 43) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (9.8ms)
Completed 200 OK in 18ms (Views: 5.9ms | ActiveRecord: 7.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 7ms (Views: 1.0ms | ActiveRecord: 3.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 2.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:42:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (3.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (3.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.0ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (78.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (103.18ms)
Completed 200 OK in 110ms (Views: 11.2ms | ActiveRecord: 97.6ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:42:51 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (0.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
  [1m[35m (3.1ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')
[active_model_serializers]   [1m[36mSession Load (2.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mSession Load (1.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (1.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (10.96ms)
Completed 200 OK in 19ms (Views: 6.0ms | ActiveRecord: 10.4ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:42:51 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
  [1m[36m (0.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')[0m
[active_model_serializers]   [1m[35mSession Load (3.9ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mSession Load (2.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (11.02ms)
Completed 200 OK in 17ms (Views: 4.6ms | ActiveRecord: 9.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 1.0ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:42:52 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:42:52 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.9ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (4.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.8ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (68.6ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (91.52ms)
Completed 200 OK in 98ms (Views: 11.2ms | ActiveRecord: 85.5ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:46:11 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (5.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 8ms (Views: 0.2ms | ActiveRecord: 5.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:46:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:46:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 8ms (Views: 0.4ms | ActiveRecord: 0.9ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:46:11 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.1ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (3.1ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (58.8ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (75.54ms)
Completed 200 OK in 82ms (Views: 7.3ms | ActiveRecord: 72.9ms)


Started GET "/games/11" for 127.0.0.1 at 2016-10-16 22:53:16 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"11"}
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (2.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '11')[0m
[active_model_serializers]   [1m[35mSession Load (2.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (1.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (7.72ms)
Completed 200 OK in 14ms (Views: 3.7ms | ActiveRecord: 7.8ms)


Started GET "/games/11" for 127.0.0.1 at 2016-10-16 22:53:16 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"11"}
  [1m[35mUser Load (3.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '11')
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (3.3ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 11) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.11ms)
Completed 200 OK in 14ms (Views: 4.4ms | ActiveRecord: 7.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:53:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:53:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (4.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 0.6ms | ActiveRecord: 4.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:53:22 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (2.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (1.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (8.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.4ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (35.7ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (76.36ms)
Completed 200 OK in 81ms (Views: 24.3ms | ActiveRecord: 55.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (7.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 10ms (Views: 0.5ms | ActiveRecord: 8.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:54:11 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 5ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:11 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 3.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:54:11 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (4.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (3.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (1.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (5.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.5ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (58.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.57ms)
Completed 200 OK in 88ms (Views: 6.5ms | ActiveRecord: 80.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:54:19 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:19 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:19 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:54:19 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (3.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (2.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (3.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.1ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (71.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (87.62ms)
Completed 200 OK in 93ms (Views: 7.7ms | ActiveRecord: 84.4ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:54:28 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
  [1m[36m (2.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')[0m
[active_model_serializers]   [1m[35mSession Load (1.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mSession Load (0.6ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.81ms)
Completed 200 OK in 16ms (Views: 4.2ms | ActiveRecord: 10.1ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:54:28 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[35mUser Load (4.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
  [1m[35m (5.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')
[active_model_serializers]   [1m[36mSession Load (0.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mSession Load (2.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (6.12ms)
Completed 200 OK in 21ms (Views: 3.2ms | ActiveRecord: 12.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:29 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.9ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:29 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 2.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:54:29 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (6.2ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.3ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (68.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (93.63ms)
Completed 200 OK in 100ms (Views: 11.3ms | ActiveRecord: 83.6ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:54:33 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
  [1m[36m (2.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')[0m
[active_model_serializers]   [1m[35mSession Load (4.2ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.44ms)
Completed 200 OK in 16ms (Views: 3.8ms | ActiveRecord: 9.7ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:54:34 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
  [1m[35m (1.7ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')
[active_model_serializers]   [1m[36mSession Load (2.3ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mSession Load (3.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (15.31ms)
Completed 200 OK in 23ms (Views: 10.0ms | ActiveRecord: 10.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:34 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:54:34 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:54:34 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (6.0ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (6.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (3.3ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (5.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (79.7ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (125.67ms)
Completed 200 OK in 133ms (Views: 19.4ms | ActiveRecord: 109.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:56:01 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (6.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 6.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:01 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:02 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 8ms (Views: 0.5ms | ActiveRecord: 5.9ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:56:02 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (2.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (75.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (95.74ms)
Completed 200 OK in 101ms (Views: 8.0ms | ActiveRecord: 91.5ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:56:10 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mGame Load (1.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')
[active_model_serializers]   [1m[36mSession Load (2.1ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mSession Load (2.8ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (12.12ms)
Completed 200 OK in 19ms (Views: 6.6ms | ActiveRecord: 10.0ms)


Started GET "/games/26" for 127.0.0.1 at 2016-10-16 22:56:10 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"26"}
  [1m[36mUser Load (2.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mGame Load (4.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
  [1m[36m (6.4ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '26')[0m
[active_model_serializers]   [1m[35mSession Load (5.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mSession Load (2.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (2.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 26) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (23.17ms)
Completed 200 OK in 39ms (Views: 11.7ms | ActiveRecord: 24.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:13 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:14 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 2.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:56:14 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (0.4ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.1ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (76.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (96.04ms)
Completed 200 OK in 106ms (Views: 9.2ms | ActiveRecord: 91.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:56:30 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 2ms (Views: 0.3ms | ActiveRecord: 0.3ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (2.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 2.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:30 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 2.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:56:30 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (5.9ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (2.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (2.0ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (5.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (61.9ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (82.23ms)
Completed 200 OK in 93ms (Views: 9.5ms | ActiveRecord: 82.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:56:38 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (4.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 6ms (Views: 0.3ms | ActiveRecord: 4.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:38 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 3.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:56:39 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (7.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 10ms (Views: 0.5ms | ActiveRecord: 7.6ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:56:39 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (11.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (4.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (4.9ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (3.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (5.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (3.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (6.1ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (64.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (106.58ms)
Completed 200 OK in 124ms (Views: 10.8ms | ActiveRecord: 111.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:56:40 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.4ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.54ms)
Completed 200 OK in 49ms (Views: 4.4ms | ActiveRecord: 3.1ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:56:41 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.7ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:56:41 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 2.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-16 22:56:41 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (9.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (7.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (3.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (3.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.8ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (7.0ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.0ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (67.9ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (106.2ms)
Completed 200 OK in 121ms (Views: 7.6ms | ActiveRecord: 111.7ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:56:44 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (0.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.9ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.39ms)
Completed 200 OK in 7ms (Views: 2.3ms | ActiveRecord: 2.8ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-16 22:56:45 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mUser Load (3.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.5ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-16 22:56:45 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 0.4ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-10-16 22:56:46 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mPlayer Exists (2.9ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (6.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (7.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mGame Load (7.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 32]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.8ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.7ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 3
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (3.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 3
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (39.08ms)
Completed 200 OK in 44ms (Views: 7.2ms | ActiveRecord: 36.1ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:56:48 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.6ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.39ms)
Completed 200 OK in 5ms (Views: 0.8ms | ActiveRecord: 2.8ms)


Started GET "/players/4" for 127.0.0.1 at 2016-10-16 22:56:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.4ms)


Started GET "/players/4" for 127.0.0.1 at 2016-10-16 22:56:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.0ms)


Started GET "/players/4/statistics" for 127.0.0.1 at 2016-10-16 22:56:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"4"}
  [1m[35mPlayer Exists (6.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (1.7ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 4)
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (5.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 15]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 10]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (6.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 4) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.5ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 4
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (2.6ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 4
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (29.14ms)
Completed 200 OK in 40ms (Views: 6.9ms | ActiveRecord: 31.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:56:52 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.0ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.34ms)
Completed 200 OK in 7ms (Views: 0.7ms | ActiveRecord: 4.2ms)


Started GET "/players/5" for 127.0.0.1 at 2016-10-16 22:56:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.7ms)


Started GET "/players/5" for 127.0.0.1 at 2016-10-16 22:56:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[35mUser Load (3.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 5]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.6ms)


Started GET "/players/5/statistics" for 127.0.0.1 at 2016-10-16 22:56:54 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"5"}
  [1m[35mPlayer Exists (6.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 5]]
  [1m[36mUser Load (1.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (2.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 5)
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 41]]
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (7.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 41]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 5) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.7ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 5
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 5
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (25.52ms)
Completed 200 OK in 35ms (Views: 11.3ms | ActiveRecord: 22.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:56:56 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.41ms)
Completed 200 OK in 8ms (Views: 0.8ms | ActiveRecord: 5.2ms)


Started GET "/players/6" for 127.0.0.1 at 2016-10-16 22:56:58 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 6]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.1ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.9ms)


Started GET "/players/6" for 127.0.0.1 at 2016-10-16 22:56:58 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 6]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.3ms)


Started GET "/players/6/statistics" for 127.0.0.1 at 2016-10-16 22:56:59 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mPlayer Exists (6.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 6]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 6)
[active_model_serializers]   [1m[36mGame Load (2.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 6) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mGame Load (5.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 6) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 6) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 6) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.6ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 6
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 6
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (22.74ms)
Completed 200 OK in 31ms (Views: 10.2ms | ActiveRecord: 20.0ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:01 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.8ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.38ms)
Completed 200 OK in 5ms (Views: 0.7ms | ActiveRecord: 3.1ms)


Started GET "/players/7" for 127.0.0.1 at 2016-10-16 22:57:03 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"7"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 7]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.5ms)


Started GET "/players/7" for 127.0.0.1 at 2016-10-16 22:57:03 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"7"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.5ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 7]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.7ms)


Started GET "/players/7/statistics" for 127.0.0.1 at 2016-10-16 22:57:03 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"7"}
  [1m[35mPlayer Exists (4.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 7]]
  [1m[36mUser Load (1.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (10.0ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 7)
[active_model_serializers]   [1m[36mGame Load (1.3ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 7) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 28]]
[active_model_serializers]   [1m[36mGame Load (2.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 7) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 28]]
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 7) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 28]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 7) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.7ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 7
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (1.9ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 7
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (29.21ms)
Completed 200 OK in 39ms (Views: 15.2ms | ActiveRecord: 23.0ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:06 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.35ms)
Completed 200 OK in 8ms (Views: 0.7ms | ActiveRecord: 0.4ms)


Started GET "/players/8" for 127.0.0.1 at 2016-10-16 22:57:09 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"8"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 3.7ms)


Started GET "/players/8" for 127.0.0.1 at 2016-10-16 22:57:09 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"8"}
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.8ms)


Started GET "/players/8/statistics" for 127.0.0.1 at 2016-10-16 22:57:09 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"8"}
  [1m[35mPlayer Exists (2.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 8]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (7.2ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 8)
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 8) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 28]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 8) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 28]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 8) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 28]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.8ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 8) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.6ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 8
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (0.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 8
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (39.8ms)
Completed 200 OK in 45ms (Views: 26.1ms | ActiveRecord: 17.4ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:13 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (3.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 3.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:57:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:57:22 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 7ms (Views: 0.4ms | ActiveRecord: 4.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:57:22 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (2.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (2.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.9ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (67.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (84.54ms)
Completed 200 OK in 89ms (Views: 6.5ms | ActiveRecord: 81.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:25 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (5.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.36ms)
Completed 200 OK in 8ms (Views: 0.7ms | ActiveRecord: 5.4ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-16 22:57:25 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.6ms | ActiveRecord: 2.1ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-16 22:57:25 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.4ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-10-16 22:57:26 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mPlayer Exists (3.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (3.0ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.9ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 32]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 3
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (4.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 3
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (22.9ms)
Completed 200 OK in 29ms (Views: 8.1ms | ActiveRecord: 19.4ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:27 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.4ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.37ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 3.6ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:57:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.4ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:57:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (2.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-16 22:57:28 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (2.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (7.5ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (1.9ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (6.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.8ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (2.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.4ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (83.4ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (120.39ms)
Completed 200 OK in 125ms (Views: 12.2ms | ActiveRecord: 111.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:30 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.41ms)
Completed 200 OK in 6ms (Views: 0.8ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:57:31 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (3.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (1.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-16 22:57:31 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (5.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (3.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 11ms (Views: 0.6ms | ActiveRecord: 8.8ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-16 22:57:32 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mPlayer Exists (5.7ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (57.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (71.31ms)
Completed 200 OK in 83ms (Views: 8.8ms | ActiveRecord: 73.1ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:48 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (2.5ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.54ms)
Completed 200 OK in 8ms (Views: 0.9ms | ActiveRecord: 4.4ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:57:48 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 2ms (Views: 0.4ms | ActiveRecord: 0.3ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:57:48 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (3.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 12ms (Views: 0.5ms | ActiveRecord: 3.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-16 22:57:49 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (0.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[35m (4.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.8ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (83.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (99.27ms)
Completed 200 OK in 107ms (Views: 7.0ms | ActiveRecord: 96.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:57:49 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.36ms)
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 2.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-16 22:58:03 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (4.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
Completed 200 OK in 6ms (Views: 0.3ms | ActiveRecord: 4.4ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-16 22:58:03 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (3.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.35ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 3.3ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:58:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (4.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 6ms (Views: 0.6ms | ActiveRecord: 4.1ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-16 22:58:04 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (4.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.11ms)
Completed 200 OK in 6ms (Views: 0.4ms | ActiveRecord: 4.5ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-16 22:58:04 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (6.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "45f11ee3-e781-48a7-bf62-efc6408af1c8"]]
[active_model_serializers]   [1m[36m (1.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (2.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (5.1ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.4ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (58.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (80.2ms)
Completed 200 OK in 90ms (Views: 6.9ms | ActiveRecord: 82.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-24 20:19:12 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.9ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]", "session"=>{}}
Can't verify CSRF token authenticity
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[35mUser Load (6.2ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Unpermitted parameter: session
Unpermitted parameter: session
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"VLHtnM0D3Ta40Hfj7w_iRw\":{\"token\":\"$2a$10$JlWnXq8ScuWQklta9aMu0ezXtZC1ehmEEZC.qewlW5Hfiosmjgcei\",\"expiry\":1477444530},\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753}}"], ["uid", "ccf55a28-d6df-4514-8fd2-b7969981c8e3"], ["confirmed_at", "2016-10-25 03:19:13.148329"], ["updated_at", "2016-10-25 03:19:13.149071"], ["id", 1]]
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-16 04:58:58.505573"], ["current_sign_in_at", "2016-10-25 03:19:13.175338"], ["sign_in_count", 6], ["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"], ["confirmed_at", "2016-10-25 03:19:13.176612"], ["updated_at", "2016-10-25 03:19:13.177044"], ["id", 1]]
  [1m[35m (2.3ms)[0m  COMMIT
Completed 200 OK in 343ms (Views: 3.3ms | ActiveRecord: 35.6ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-24 20:19:15 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mPlayer Load (3.8ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.7ms)
Completed 200 OK in 188ms (Views: 1.3ms | ActiveRecord: 5.9ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-24 20:19:17 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (1.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.29ms)
Completed 200 OK in 11ms (Views: 4.9ms | ActiveRecord: 1.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-24 20:19:17 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mPlayer Load (6.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 9ms (Views: 0.5ms | ActiveRecord: 6.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-24 20:19:18 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
[active_model_serializers]   [1m[36m (2.6ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.2ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (3.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (3.3ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (47.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (118.21ms)
Completed 200 OK in 150ms (Views: 50.5ms | ActiveRecord: 71.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-24 20:40:05 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (3.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (3.1ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (1.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (4.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (46.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (68.17ms)
Completed 200 OK in 74ms (Views: 8.3ms | ActiveRecord: 64.4ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-24 20:41:06 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (4.6ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[36m (2.4ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (3.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (2.4ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.0ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (62.3ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (83.8ms)
Completed 200 OK in 94ms (Views: 10.3ms | ActiveRecord: 80.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/" for 127.0.0.1 at 2016-10-25 16:17:51 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 31ms (Views: 2.3ms | ActiveRecord: 0.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/" for 127.0.0.1 at 2016-10-25 17:03:57 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m

ActionController::RoutingError (undefined method `protect_from_forgery' for ApplicationController:Class):
  app/controllers/application_controller.rb:6:in `<class:ApplicationController>'
  app/controllers/application_controller.rb:1:in `<top (required)>'
  app/controllers/welcome_controller.rb:1:in `<top (required)>'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (8.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (45.2ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 17:04:11 -0700

ActionController::RoutingError (undefined method `protect_from_forgery' for ApplicationController:Class):
  app/controllers/application_controller.rb:6:in `<class:ApplicationController>'
  app/controllers/application_controller.rb:1:in `<top (required)>'
  app/controllers/player_statistics_controller.rb:1:in `<top (required)>'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (6.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (35.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 17:04:32 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (5.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (2.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (4.2ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (5.3ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (0.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.6ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (32.2ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (105.94ms)
Completed 200 OK in 184ms (Views: 58.5ms | ActiveRecord: 69.3ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 17:12:25 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
Completed 200 OK in 257ms (Views: 6.5ms | ActiveRecord: 6.2ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 17:12:27 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mPlayer Load (3.0ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.71ms)
Completed 200 OK in 35ms (Views: 1.4ms | ActiveRecord: 5.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 17:12:29 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.27ms)
Completed 200 OK in 8ms (Views: 1.8ms | ActiveRecord: 1.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 17:12:29 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (3.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 3.4ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-25 17:12:29 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mPlayer Exists (0.4ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
  [1m[35mUser Load (10.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
[active_model_serializers]   [1m[36m (1.2ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (3.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.7ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (48.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (146.27ms)
Completed 200 OK in 240ms (Views: 91.4ms | ActiveRecord: 75.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/games/list" for 127.0.0.1 at 2016-10-25 17:20:38 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by GamesController#list as HTML
  [1m[35mUser Load (3.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mGame Load (0.9ms)[0m  [1mSELECT "games".* FROM "games"  ORDER BY name[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (6.77ms)
Completed 200 OK in 240ms (Views: 35.9ms | ActiveRecord: 10.4ms)


Started GET "/games/51" for 127.0.0.1 at 2016-10-25 17:20:41 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mGame Load (0.6ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (3.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (2.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (39.49ms)
Completed 200 OK in 63ms (Views: 26.7ms | ActiveRecord: 20.6ms)


Started GET "/games/51" for 127.0.0.1 at 2016-10-25 17:20:41 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (1.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (3.1ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (1.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (1.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (6.4ms)
Completed 200 OK in 14ms (Views: 3.9ms | ActiveRecord: 7.6ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-25 17:20:43 -0700
Processing by GamesController#list as HTML
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mGame Load (2.1ms)[0m  [1mSELECT "games".* FROM "games"  ORDER BY name[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.31ms)
Completed 200 OK in 10ms (Views: 4.0ms | ActiveRecord: 4.1ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-25 17:20:45 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mGame Load (2.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 6]]
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')
[active_model_serializers]   [1m[36mSession Load (1.9ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (1.1ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (1.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.37ms)
Completed 200 OK in 14ms (Views: 4.4ms | ActiveRecord: 7.3ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-25 17:20:45 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[35mGame Load (1.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 6]]
  [1m[36m (2.5ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')[0m
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (0.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (7.27ms)
Completed 200 OK in 14ms (Views: 4.4ms | ActiveRecord: 7.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 17:20:47 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (6.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mPlayer Load (2.1ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.62ms)
Completed 200 OK in 16ms (Views: 1.2ms | ActiveRecord: 8.2ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-25 17:20:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mPlayer Load (2.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.29ms)
Completed 200 OK in 5ms (Views: 1.6ms | ActiveRecord: 2.3ms)


Started GET "/players/3" for 127.0.0.1 at 2016-10-25 17:20:49 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mPlayer Load (1.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 3]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.6ms)


Started GET "/players/3/statistics" for 127.0.0.1 at 2016-10-25 17:20:50 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"3"}
  [1m[35mPlayer Exists (0.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 3]]
  [1m[36mUser Load (11.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
[active_model_serializers]   [1m[35m (5.1ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 3)
[active_model_serializers]   [1m[36mGame Load (4.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (4.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.0ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mGame Load (0.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 32]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 3) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.0ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 3
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (8.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 3
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (50.35ms)
Completed 200 OK in 80ms (Views: 24.5ms | ActiveRecord: 41.4ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 17:20:56 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
  [1m[36mPlayer Load (2.0ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.36ms)
Completed 200 OK in 6ms (Views: 0.7ms | ActiveRecord: 3.2ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 17:24:09 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.8ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (0.4ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (0.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.9ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (1.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (3.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (44.7ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (122.29ms)
Completed 200 OK in 177ms (Views: 64.1ms | ActiveRecord: 68.9ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 17:24:45 -0700
Processing by PlayerStatisticsController#show as */*
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (0.5ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (1.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (2.3ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (3.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (53.2ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (72.77ms)
Completed 200 OK in 77ms (Views: 7.5ms | ActiveRecord: 68.1ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 17:24:51 -0700
Processing by PlayerStatisticsController#show as */*
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (0.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (31.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (57.0ms)
Completed 200 OK in 70ms (Views: 22.1ms | ActiveRecord: 38.0ms)


Started GET "/players/200/statistics" for 127.0.0.1 at 2016-10-25 17:26:08 -0700
Processing by PlayerStatisticsController#show as */*
  Parameters: {"id"=>"200"}
  [1m[35mPlayer Exists (0.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 200]]
Completed 404 Not Found in 6ms (ActiveRecord: 1.0ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (6.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (17.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (94.3ms)


Started GET "/players/200/statistics" for 127.0.0.1 at 2016-10-25 17:26:16 -0700
Processing by PlayerStatisticsController#show as */*
  Parameters: {"id"=>"200"}
  [1m[36mPlayer Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 200]]
Completed 404 Not Found in 11ms (ActiveRecord: 1.1ms)

ActionController::RoutingError (Not Found):
  app/controllers/application_controller.rb:10:in `not_found'
  app/controllers/player_statistics_controller.rb:4:in `show'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (1.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (29.4ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 17:26:31 -0700
Processing by PlayerStatisticsController#show as */*
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (0.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (4.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "5c97d46c-6c15-4dfb-9ac6-d49b8703186c"]]
[active_model_serializers]   [1m[35m (0.3ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (4.3ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.7ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (5.4ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (56.2ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (116.06ms)
Completed 200 OK in 130ms (Views: 27.7ms | ActiveRecord: 95.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 18:18:55 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "5ad7c0c7-6e54-4ef0-8412-3a55f8017f83"]]
Completed 200 OK in 189ms (Views: 6.3ms | ActiveRecord: 4.6ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 18:19:03 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (1.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944}}"], ["uid", "aa1037ae-4475-4cca-9618-304093249858"], ["confirmed_at", "2016-10-26 01:19:04.042310"], ["updated_at", "2016-10-26 01:19:04.042715"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (4.1ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-25 03:19:13.175338"], ["current_sign_in_at", "2016-10-26 01:19:04.062557"], ["sign_in_count", 7], ["uid", "5697d228-2c7d-4196-8819-411868f8ba10"], ["confirmed_at", "2016-10-26 01:19:04.063904"], ["updated_at", "2016-10-26 01:19:04.064177"], ["id", 1]]
  [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 301ms (Views: 0.3ms | ActiveRecord: 11.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 18:21:38 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (3.1ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (9.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098}}"], ["uid", "00a4c825-9a6c-4d01-9d39-946a9e5ba528"], ["confirmed_at", "2016-10-26 01:21:38.663103"], ["updated_at", "2016-10-26 01:21:38.663433"], ["id", 1]]
  [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (2.8ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 01:19:04.062557"], ["current_sign_in_at", "2016-10-26 01:21:38.678378"], ["sign_in_count", 8], ["uid", "be3bf907-60b9-4a60-82e2-2c64d23916d2"], ["confirmed_at", "2016-10-26 01:21:38.679575"], ["updated_at", "2016-10-26 01:21:38.679826"], ["id", 1]]
  [1m[35m (0.9ms)[0m  COMMIT
Completed 200 OK in 289ms (Views: 0.3ms | ActiveRecord: 19.4ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:37:29 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as */*
Completed 401 Unauthorized in 44ms (Views: 5.9ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:38:02 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (3.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (1.4ms)[0m  BEGIN
  [1m[36mSQL (2.7ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482}}"], ["uid", "f06ebac6-5d1d-4132-81bc-362b87ef3fcc"], ["confirmed_at", "2016-10-26 05:38:02.360216"], ["updated_at", "2016-10-26 05:38:02.374804"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36m (2.4ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 01:21:38.678378"], ["current_sign_in_at", "2016-10-26 05:38:02.382529"], ["sign_in_count", 9], ["uid", "7bb3d11f-d42a-4d1e-8428-a6275424bbdf"], ["confirmed_at", "2016-10-26 05:38:02.385952"], ["updated_at", "2016-10-26 05:38:02.386201"], ["id", 1]]
  [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 325ms (Views: 5.4ms | ActiveRecord: 12.8ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:38:19 -0700
Processing by DeviseTokenAuth::SessionsController#create as */*
Completed 401 Unauthorized in 20ms (Views: 0.3ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:38:41 -0700
Processing by DeviseTokenAuth::SessionsController#create as */*
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:38:53 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:41:11 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:42:13 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:42:22 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:42:42 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:43:00 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 2ms (Views: 1.4ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:43:17 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:43:32 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812}}"], ["uid", "cbc62e95-23d3-4651-91fe-50149aa20b55"], ["confirmed_at", "2016-10-26 05:43:32.718343"], ["updated_at", "2016-10-26 05:43:32.718713"], ["id", 1]]
  [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.8ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 05:38:02.382529"], ["current_sign_in_at", "2016-10-26 05:43:32.725878"], ["sign_in_count", 10], ["uid", "cc93aa2d-1fca-424a-b128-e6d7c01c827c"], ["confirmed_at", "2016-10-26 05:43:32.727144"], ["updated_at", "2016-10-26 05:43:32.727461"], ["id", 1]]
  [1m[35m (1.0ms)[0m  COMMIT
Completed 200 OK in 181ms (Views: 0.3ms | ActiveRecord: 8.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:43:37 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817}}"], ["uid", "7315eb82-d6ac-4287-b147-02e3d6371dbc"], ["confirmed_at", "2016-10-26 05:43:37.768361"], ["updated_at", "2016-10-26 05:43:37.768784"], ["id", 1]]
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 05:43:32.725878"], ["current_sign_in_at", "2016-10-26 05:43:37.775769"], ["sign_in_count", 11], ["uid", "94511759-0965-43fd-bad4-3c04dbd527b4"], ["confirmed_at", "2016-10-26 05:43:37.777158"], ["updated_at", "2016-10-26 05:43:37.778064"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 173ms (Views: 0.2ms | ActiveRecord: 7.3ms)


Started POST "/players/2/statistics" for 127.0.0.1 at 2016-10-25 22:45:33 -0700

ActionController::RoutingError (No route matches [POST] "/players/2/statistics"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (7.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (15.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (76.4ms)


Started POST "/players/2/statistics" for 127.0.0.1 at 2016-10-25 22:45:55 -0700

ActionController::RoutingError (No route matches [POST] "/players/2/statistics"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (6.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (1.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (5.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (61.0ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 22:46:06 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "7bb3d11f-d42a-4d1e-8428-a6275424bbdf"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 2ms (Views: 0.5ms | ActiveRecord: 0.3ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:46:32 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (3.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (6.2ms)[0m  BEGIN
  [1m[36mSQL (4.5ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993}}"], ["uid", "8bd06a36-d0f3-45e2-9af7-61d6355d3bf4"], ["confirmed_at", "2016-10-26 05:46:33.116055"], ["updated_at", "2016-10-26 05:46:33.116791"], ["id", 1]]
  [1m[35m (3.0ms)[0m  COMMIT
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 05:43:37.775769"], ["current_sign_in_at", "2016-10-26 05:46:33.129089"], ["sign_in_count", 12], ["uid", "d8794e26-1d29-4bf3-986f-ba75b544f10c"], ["confirmed_at", "2016-10-26 05:46:33.157612"], ["updated_at", "2016-10-26 05:46:33.158004"], ["id", 1]]
  [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 332ms (Views: 0.4ms | ActiveRecord: 19.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 22:46:34 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d8794e26-1d29-4bf3-986f-ba75b544f10c"]]
  [1m[36mPlayer Load (2.6ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.77ms)
Completed 200 OK in 144ms (Views: 5.6ms | ActiveRecord: 5.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 22:46:35 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d8794e26-1d29-4bf3-986f-ba75b544f10c"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.3ms)
Completed 200 OK in 11ms (Views: 6.7ms | ActiveRecord: 0.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 22:46:36 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d8794e26-1d29-4bf3-986f-ba75b544f10c"]]
  [1m[36mPlayer Load (0.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:54:52 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (7.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493}}"], ["uid", "f4ad7448-83fc-47c8-8164-1ba25a510098"], ["confirmed_at", "2016-10-26 05:54:53.073875"], ["updated_at", "2016-10-26 05:54:53.074265"], ["id", 1]]
  [1m[36m (5.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (1.5ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 05:46:33.129089"], ["current_sign_in_at", "2016-10-26 05:54:53.099814"], ["sign_in_count", 13], ["uid", "4c0b0ede-9f8b-468f-8ff2-cbe811e6cb9e"], ["confirmed_at", "2016-10-26 05:54:53.102287"], ["updated_at", "2016-10-26 05:54:53.102592"], ["id", 1]]
  [1m[35m (1.2ms)[0m  COMMIT
Completed 200 OK in 259ms (Views: 0.3ms | ActiveRecord: 17.3ms)


Started POST "/players/2/statistics" for 127.0.0.1 at 2016-10-25 22:55:27 -0700

ActionController::RoutingError (No route matches [POST] "/players/2/statistics"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (6.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (1.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.7ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (47.9ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 22:58:07 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688}}"], ["uid", "428694e2-327d-4784-9a90-026b2121cfcf"], ["confirmed_at", "2016-10-26 05:58:08.199965"], ["updated_at", "2016-10-26 05:58:08.200410"], ["id", 1]]
  [1m[35m (4.5ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (7.2ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 05:54:53.099814"], ["current_sign_in_at", "2016-10-26 05:58:08.212064"], ["sign_in_count", 14], ["uid", "3468484c-0e8f-4f18-b68b-77c8a5c5549d"], ["confirmed_at", "2016-10-26 05:58:08.213070"], ["updated_at", "2016-10-26 05:58:08.213387"], ["id", 1]]
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 302ms (Views: 0.3ms | ActiveRecord: 15.5ms)


Started POST "/players/2/statistics" for 127.0.0.1 at 2016-10-25 22:59:18 -0700

ActionController::RoutingError (No route matches [POST] "/players/2/statistics"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (10.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (47.9ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 22:59:30 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (0.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "94511759-0965-43fd-bad4-3c04dbd527b4"]]
[active_model_serializers]   [1m[35m (1.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (4.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (3.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (0.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (3.2ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (5.2ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (37.2ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (124.32ms)
Completed 200 OK in 154ms (Views: 62.6ms | ActiveRecord: 65.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 22:59:39 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (5.8ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "94511759-0965-43fd-bad4-3c04dbd527b4"]]
[active_model_serializers]   [1m[35m (1.5ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (0.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.3ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (0.9ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (56.3ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (71.81ms)
Completed 200 OK in 80ms (Views: 7.1ms | ActiveRecord: 71.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:04:12 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d8794e26-1d29-4bf3-986f-ba75b544f10c"]]
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:04:12 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "d8794e26-1d29-4bf3-986f-ba75b544f10c"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 3ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:04:23 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (2.9ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (2.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.7ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063}}"], ["uid", "fef4c979-8265-4bbe-971b-6f37687262d9"], ["confirmed_at", "2016-10-26 06:04:23.854083"], ["updated_at", "2016-10-26 06:04:23.854634"], ["id", 1]]
  [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (2.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 05:58:08.212064"], ["current_sign_in_at", "2016-10-26 06:04:23.872062"], ["sign_in_count", 15], ["uid", "7d55bb86-040d-4ae3-bdcb-d2a39a332b54"], ["confirmed_at", "2016-10-26 06:04:23.873143"], ["updated_at", "2016-10-26 06:04:23.873458"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
Completed 200 OK in 318ms (Views: 0.2ms | ActiveRecord: 13.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 23:04:26 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "7d55bb86-040d-4ae3-bdcb-d2a39a332b54"]]
  [1m[35mPlayer Load (0.4ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.4ms)
Completed 200 OK in 131ms (Views: 0.8ms | ActiveRecord: 0.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:04:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "7d55bb86-040d-4ae3-bdcb-d2a39a332b54"]]
  [1m[35mPlayer Load (2.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:04:37 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "7d55bb86-040d-4ae3-bdcb-d2a39a332b54"]]
  [1m[35mPlayer Load (1.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 3ms (Views: 0.5ms | ActiveRecord: 1.5ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-25 23:04:54 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "94511759-0965-43fd-bad4-3c04dbd527b4"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.1ms | ActiveRecord: 0.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:20:28 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (3.0ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.9ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (4.6ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028}}"], ["uid", "c855df8d-d474-448e-a6f9-efcf867ba028"], ["confirmed_at", "2016-10-26 06:20:28.340461"], ["updated_at", "2016-10-26 06:20:28.344775"], ["id", 1]]
  [1m[36m (6.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (3.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 06:04:23.872062"], ["current_sign_in_at", "2016-10-26 06:20:28.359630"], ["sign_in_count", 16], ["uid", "4e4dd703-281a-4722-864a-2ce54cf8965b"], ["confirmed_at", "2016-10-26 06:20:28.360788"], ["updated_at", "2016-10-26 06:20:28.363293"], ["id", 1]]
  [1m[35m (1.0ms)[0m  COMMIT
Completed 200 OK in 311ms (Views: 0.3ms | ActiveRecord: 19.7ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:21:12 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (6.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (10.2ms)[0m  BEGIN
  [1m[36mSQL (0.7ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072}}"], ["uid", "9c6dabf3-75a4-446b-97d1-6790c97551a2"], ["confirmed_at", "2016-10-26 06:21:12.819781"], ["updated_at", "2016-10-26 06:21:12.820271"], ["id", 1]]
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (9.1ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 06:20:28.359630"], ["current_sign_in_at", "2016-10-26 06:21:12.833911"], ["sign_in_count", 17], ["uid", "2701d8e7-80e3-4ddd-a17e-522bc141d128"], ["confirmed_at", "2016-10-26 06:21:12.835634"], ["updated_at", "2016-10-26 06:21:12.836028"], ["id", 1]]
  [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 277ms (Views: 0.2ms | ActiveRecord: 29.8ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:21:16 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (5.0ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072},\"yVsSpODXNEAnqyTsUw0hDQ\":{\"token\":\"$2a$10$A1F14xtAfYvdy1Oy.3gHterjKREdc3.JvNBCcNw440A4WD/J41yPe\",\"expiry\":1478676076}}"], ["uid", "c7cd4f28-6818-498a-bd78-5147703eb8c3"], ["confirmed_at", "2016-10-26 06:21:16.546275"], ["updated_at", "2016-10-26 06:21:16.547004"], ["id", 1]]
  [1m[36m (5.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (2.0ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 06:21:12.833911"], ["current_sign_in_at", "2016-10-26 06:21:16.567146"], ["sign_in_count", 18], ["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"], ["confirmed_at", "2016-10-26 06:21:16.572319"], ["updated_at", "2016-10-26 06:21:16.573606"], ["id", 1]]
  [1m[35m (0.9ms)[0m  COMMIT
Completed 200 OK in 261ms (Views: 3.5ms | ActiveRecord: 16.8ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 23:22:10 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (2.1ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"]]
[active_model_serializers]   [1m[36m (0.7ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.6ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (39.1ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (54.9ms)
Completed 200 OK in 165ms (Views: 112.9ms | ActiveRecord: 45.7ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 23:22:16 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mPlayer Exists (2.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35m (0.4ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)
[active_model_serializers]   [1m[36mGame Load (1.4ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mGame Load (3.8ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 8]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (55.5ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (77.08ms)
Completed 200 OK in 81ms (Views: 7.8ms | ActiveRecord: 71.9ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 23:22:20 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mPlayer Exists (2.0ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36m (0.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (1.4ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.3ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (0.8ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (59.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (79.48ms)
Completed 200 OK in 83ms (Views: 7.8ms | ActiveRecord: 74.2ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-25 23:22:28 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-25 23:22:34 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"]]
  [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.17ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 1.8ms)


Started GET "/players/2" for 127.0.0.1 at 2016-10-25 23:23:28 -0700
Processing by PlayersController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"]]
  [1m[35mPlayer Load (1.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.74ms)
Completed 200 OK in 157ms (Views: 3.9ms | ActiveRecord: 11.8ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 23:23:32 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.9ms | ActiveRecord: 0.0ms)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-10-25 23:23:38 -0700
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[36mUser Load (3.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"]]
  [1m[35mPlayer Exists (3.1ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36m (0.3ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 2)[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mGame Load (4.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 8]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 2) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (1.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 2
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (62.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 2
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (118.02ms)
Completed 200 OK in 141ms (Views: 37.9ms | ActiveRecord: 88.3ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:24:28 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (1.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "7d55bb86-040d-4ae3-bdcb-d2a39a332b54"]]
Completed 401 Unauthorized in 3ms (Views: 0.2ms | ActiveRecord: 1.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:24:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "7d55bb86-040d-4ae3-bdcb-d2a39a332b54"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 2ms (Views: 0.2ms | ActiveRecord: 1.3ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:24:36 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (8.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.6ms)[0m  BEGIN
  [1m[36mSQL (7.6ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072},\"yVsSpODXNEAnqyTsUw0hDQ\":{\"token\":\"$2a$10$A1F14xtAfYvdy1Oy.3gHterjKREdc3.JvNBCcNw440A4WD/J41yPe\",\"expiry\":1478676076},\"41n7fkz7JWqFexxMn1KEVA\":{\"token\":\"$2a$10$SSC/1ZfLawKMDcUD6sQ0W.Gv5Q/roHxYYxr/rh6eodyeaVkI/s04e\",\"expiry\":1478676276}}"], ["uid", "33da69ed-93b5-4288-996f-817d26e40500"], ["confirmed_at", "2016-10-26 06:24:36.395666"], ["updated_at", "2016-10-26 06:24:36.396170"], ["id", 1]]
  [1m[35m (1.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 06:21:16.567146"], ["current_sign_in_at", "2016-10-26 06:24:36.410937"], ["sign_in_count", 19], ["uid", "d3cebe02-ef59-4ac7-ba95-c876877f1d25"], ["confirmed_at", "2016-10-26 06:24:36.412047"], ["updated_at", "2016-10-26 06:24:36.412411"], ["id", 1]]
  [1m[36m (4.8ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 342ms (Views: 0.3ms | ActiveRecord: 22.7ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 23:24:39 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d3cebe02-ef59-4ac7-ba95-c876877f1d25"]]
  [1m[36mPlayer Load (3.6ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.53ms)
Completed 200 OK in 134ms (Views: 1.0ms | ActiveRecord: 3.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:24:43 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d3cebe02-ef59-4ac7-ba95-c876877f1d25"]]
  [1m[36mPlayer Load (0.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:24:44 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "d3cebe02-ef59-4ac7-ba95-c876877f1d25"]]
  [1m[36mPlayer Load (0.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:25:38 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as JSON
  [1m[35mUser Load (0.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"]]
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:25:51 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (1.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (6.7ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072},\"yVsSpODXNEAnqyTsUw0hDQ\":{\"token\":\"$2a$10$A1F14xtAfYvdy1Oy.3gHterjKREdc3.JvNBCcNw440A4WD/J41yPe\",\"expiry\":1478676076},\"41n7fkz7JWqFexxMn1KEVA\":{\"token\":\"$2a$10$SSC/1ZfLawKMDcUD6sQ0W.Gv5Q/roHxYYxr/rh6eodyeaVkI/s04e\",\"expiry\":1478676276},\"wbm35C207QcIxeNQcj3Suw\":{\"token\":\"$2a$10$KaBnRes.d1U/qcV7DPAAiuxlhYTq9n6Oiz7lG1nYYCek7fxHtVrQ.\",\"expiry\":1478676351}}"], ["uid", "8c77a6b7-6788-4f4e-9a74-8754e4c8b62b"], ["confirmed_at", "2016-10-26 06:25:51.914876"], ["updated_at", "2016-10-26 06:25:51.915956"], ["id", 1]]
  [1m[35m (5.6ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (3.0ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 06:24:36.410937"], ["current_sign_in_at", "2016-10-26 06:25:51.933934"], ["sign_in_count", 20], ["uid", "758768d2-9351-45e7-8d62-f7a45cf4aa21"], ["confirmed_at", "2016-10-26 06:25:51.940858"], ["updated_at", "2016-10-26 06:25:51.942286"], ["id", 1]]
  [1m[36m (2.1ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 236ms (Views: 0.3ms | ActiveRecord: 19.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:32:58 -0700
  [1m[36mActiveRecord::SchemaMigration Load (2.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (3.1ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.3ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072},\"yVsSpODXNEAnqyTsUw0hDQ\":{\"token\":\"$2a$10$A1F14xtAfYvdy1Oy.3gHterjKREdc3.JvNBCcNw440A4WD/J41yPe\",\"expiry\":1478676076},\"41n7fkz7JWqFexxMn1KEVA\":{\"token\":\"$2a$10$SSC/1ZfLawKMDcUD6sQ0W.Gv5Q/roHxYYxr/rh6eodyeaVkI/s04e\",\"expiry\":1478676276},\"wbm35C207QcIxeNQcj3Suw\":{\"token\":\"$2a$10$KaBnRes.d1U/qcV7DPAAiuxlhYTq9n6Oiz7lG1nYYCek7fxHtVrQ.\",\"expiry\":1478676351},\"dC3Be_DO-qsIYpZcxubyJQ\":{\"token\":\"$2a$10$4npklaoJaR2YjU.PipNz.uuuaA0DSUaZdXQMJbqHoh7/i5HhdS/Sm\",\"expiry\":1478676779}}"], ["uid", "8b48017b-888a-48de-af24-b4ec39404bfb"], ["confirmed_at", "2016-10-26 06:32:59.192432"], ["updated_at", "2016-10-26 06:32:59.193881"], ["id", 1]]
  [1m[36m (3.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (1.5ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 06:25:51.933934"], ["current_sign_in_at", "2016-10-26 06:32:59.246872"], ["sign_in_count", 21], ["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"], ["confirmed_at", "2016-10-26 06:32:59.250128"], ["updated_at", "2016-10-26 06:32:59.250674"], ["id", 1]]
  [1m[35m (1.2ms)[0m  COMMIT
Completed 200 OK in 385ms (Views: 5.0ms | ActiveRecord: 21.5ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 23:33:04 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (3.4ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.57ms)
Completed 200 OK in 157ms (Views: 1.2ms | ActiveRecord: 4.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:33:06 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.32ms)
Completed 200 OK in 7ms (Views: 1.8ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:33:06 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (1.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 3ms (Views: 0.4ms | ActiveRecord: 1.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:34:21 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:34:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (3.9ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.19ms)
Completed 200 OK in 7ms (Views: 0.6ms | ActiveRecord: 4.2ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:34:21 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (4.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 7ms (Views: 0.6ms | ActiveRecord: 5.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:34:33 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 4ms (Views: 0.4ms | ActiveRecord: 1.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:34:33 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (1.7ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 4ms (Views: 0.7ms | ActiveRecord: 1.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:34:34 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.12ms)
Completed 200 OK in 5ms (Views: 0.8ms | ActiveRecord: 2.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:36:32 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:36:33 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (2.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 5ms (Views: 0.5ms | ActiveRecord: 3.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:36:33 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:38:53 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 231ms (Views: 2.8ms | ActiveRecord: 4.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:38:53 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (1.5ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.45ms)
Completed 200 OK in 50ms (Views: 11.9ms | ActiveRecord: 9.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:38:54 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 7ms (Views: 0.5ms | ActiveRecord: 4.7ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-25 23:38:54 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Exists (0.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36m (3.0ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (1.7ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (2.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (0.9ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (5.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.5ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (5.2ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (49.6ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (132.46ms)
Completed 200 OK in 156ms (Views: 60.0ms | ActiveRecord: 74.4ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-25 23:39:00 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (3.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mGame Load (0.5ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (6.51ms)
Completed 200 OK in 24ms (Views: 10.2ms | ActiveRecord: 4.0ms)


Started GET "/games/51" for 127.0.0.1 at 2016-10-25 23:39:03 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (4.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (4.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (1.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (23.83ms)
Completed 200 OK in 35ms (Views: 17.6ms | ActiveRecord: 12.0ms)


Started GET "/games/51" for 127.0.0.1 at 2016-10-25 23:39:03 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mGame Load (2.5ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (1.6ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (2.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (2.2ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (13.28ms)
Completed 200 OK in 23ms (Views: 7.6ms | ActiveRecord: 9.0ms)


Started GET "/games/list" for 127.0.0.1 at 2016-10-25 23:39:09 -0700
Processing by GamesController#list as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mGame Load (2.7ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (1.9ms)
Completed 200 OK in 8ms (Views: 3.5ms | ActiveRecord: 2.9ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-25 23:39:12 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mGame Load (1.6ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 6]]
  [1m[36m (4.0ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')[0m
[active_model_serializers]   [1m[35mSession Load (0.6ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (0.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (4.87ms)
Completed 200 OK in 13ms (Views: 3.8ms | ActiveRecord: 7.2ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-25 23:39:12 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mGame Load (1.9ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 6]]
  [1m[35m (0.8ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')
[active_model_serializers]   [1m[36mSession Load (2.1ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (3.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (0.7ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (11.78ms)
Completed 200 OK in 21ms (Views: 5.3ms | ActiveRecord: 9.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:39:33 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 195ms (Views: 1.2ms | ActiveRecord: 1.9ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-25 23:39:33 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 6]]
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')[0m
[active_model_serializers]   [1m[35mSession Load (10.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (1.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (48.67ms)
Completed 200 OK in 98ms (Views: 33.8ms | ActiveRecord: 24.9ms)


Started GET "/games/6" for 127.0.0.1 at 2016-10-25 23:39:34 -0700
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mGame Load (3.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 6]]
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (0.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (3.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (11.04ms)
Completed 200 OK in 18ms (Views: 5.3ms | ActiveRecord: 9.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:40:01 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (4.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (2.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.33ms)
Completed 200 OK in 163ms (Views: 6.3ms | ActiveRecord: 9.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:40:02 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (2.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 4.0ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-25 23:40:02 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Exists (0.2ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36m (0.9ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (0.6ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (6.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (1.0ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (0.8ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (2.3ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (5.5ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (57.4ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (118.47ms)
Completed 200 OK in 137ms (Views: 36.5ms | ActiveRecord: 84.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:42:25 -0700
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (5.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 12ms (Views: 1.8ms | ActiveRecord: 5.9ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 23:42:27 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.9ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (3.63ms)
Completed 200 OK in 15ms (Views: 4.1ms | ActiveRecord: 4.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:42:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 2.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:42:28 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.13ms)
Completed 200 OK in 4ms (Views: 0.5ms | ActiveRecord: 1.9ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-25 23:42:28 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (1.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[36mPlayer Exists (2.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35m (0.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.1ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (3.2ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (2.4ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (3.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (2.7ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (65.1ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (90.32ms)
Completed 200 OK in 97ms (Views: 8.3ms | ActiveRecord: 86.5ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-10-25 23:44:52 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
Completed 200 OK in 212ms (Views: 2.4ms | ActiveRecord: 6.2ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 23:44:53 -0700
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c91190f0-e9cf-4176-b6fb-7dbe6c3cf5f3"]]
  [1m[35mPlayer Load (3.0ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.72ms)
Completed 200 OK in 36ms (Views: 7.4ms | ActiveRecord: 4.3ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:45:04 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.9ms)[0m  BEGIN
  [1m[36mSQL (4.2ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072},\"yVsSpODXNEAnqyTsUw0hDQ\":{\"token\":\"$2a$10$A1F14xtAfYvdy1Oy.3gHterjKREdc3.JvNBCcNw440A4WD/J41yPe\",\"expiry\":1478676076},\"41n7fkz7JWqFexxMn1KEVA\":{\"token\":\"$2a$10$SSC/1ZfLawKMDcUD6sQ0W.Gv5Q/roHxYYxr/rh6eodyeaVkI/s04e\",\"expiry\":1478676276},\"wbm35C207QcIxeNQcj3Suw\":{\"token\":\"$2a$10$KaBnRes.d1U/qcV7DPAAiuxlhYTq9n6Oiz7lG1nYYCek7fxHtVrQ.\",\"expiry\":1478676351},\"dC3Be_DO-qsIYpZcxubyJQ\":{\"token\":\"$2a$10$4npklaoJaR2YjU.PipNz.uuuaA0DSUaZdXQMJbqHoh7/i5HhdS/Sm\",\"expiry\":1478676779},\"uoEzu0Zox79et_Wh_Gbk1w\":{\"token\":\"$2a$10$Wtbb3p6p4wDFN.JUKaSQru2YbFN.JtfkUAupSQ6Q2BDMRvNOTCgI.\",\"expiry\":1478677504}}"], ["uid", "71909dd3-059c-4723-9865-aa78b816574d"], ["confirmed_at", "2016-10-26 06:45:04.743332"], ["updated_at", "2016-10-26 06:45:04.744093"], ["id", 1]]
  [1m[35m (4.7ms)[0m  COMMIT
  [1m[36m (0.6ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-10-26 06:32:59.246872"], ["current_sign_in_at", "2016-10-26 06:45:04.769366"], ["sign_in_count", 22], ["uid", "7b39c5ef-b558-4ff2-a736-37a1e47b35f0"], ["confirmed_at", "2016-10-26 06:45:04.773154"], ["updated_at", "2016-10-26 06:45:04.773730"], ["id", 1]]
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 288ms (Views: 0.7ms | ActiveRecord: 15.4ms)


Started GET "/players/list" for 127.0.0.1 at 2016-10-25 23:45:06 -0700
Processing by PlayersController#list as HTML
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "7b39c5ef-b558-4ff2-a736-37a1e47b35f0"]]
  [1m[36mPlayer Load (3.1ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.47ms)
Completed 200 OK in 124ms (Views: 0.9ms | ActiveRecord: 5.1ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:45:07 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "7b39c5ef-b558-4ff2-a736-37a1e47b35f0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.34ms)
Completed 200 OK in 7ms (Views: 4.1ms | ActiveRecord: 0.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-10-25 23:45:07 -0700
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "7b39c5ef-b558-4ff2-a736-37a1e47b35f0"]]
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.45ms)
Completed 200 OK in 5ms (Views: 0.9ms | ActiveRecord: 2.2ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-10-25 23:45:07 -0700
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "7b39c5ef-b558-4ff2-a736-37a1e47b35f0"]]
  [1m[36mPlayer Exists (1.0ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35m (0.6ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (3.7ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.1ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (0.4ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (1.8ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (31.8ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (103.88ms)
Completed 200 OK in 140ms (Views: 57.7ms | ActiveRecord: 53.8ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-25 23:47:27 -0700
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (3.7ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.9ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"X4CMvjX6bs58rtT34uj2hw\":{\"token\":\"$2a$10$HlTVCAH5VxflKwMIk1OAl.nOLOm9KwcQFHf6uuEHAM5wpclGyQRsy\",\"expiry\":1477778142},\"peVnGTIUKyBALARUivSAVg\":{\"token\":\"$2a$10$4QIwjw2QpDZfF.vsIlVxXe2wUKUpc3JeLFlJbgNmFmV/xuEExcrHC\",\"expiry\":1477802383},\"4N0XMGFqCjkUrQZ5fACm-w\":{\"token\":\"$2a$10$pGL8ded/wMaDnDfLE0Y1/OC.jTQq7DYPU6ZXs5XYwgQ8rZQP6qPqK\",\"expiry\":1477803538},\"T_1t7R8qO4LlVBxfL2puzg\":{\"token\":\"$2a$10$cKGSvOedilYw1FSe5AugheGNHYqADKciQlU/SzTIPqW4kWQ8g7wpW\",\"expiry\":1478578753},\"FOFDpYWVwFy9BEmoxOXpGA\":{\"token\":\"$2a$10$wOshkCHzmLZDmM3kLuED9.AmMFNsdsTYwckYbI0eWCx1QFIKG/exy\",\"expiry\":1478657944},\"HCW66uWQMB7dln99e6q2nw\":{\"token\":\"$2a$10$6ITI9A6M2zxwp9QBvffyGOZHCKRgYO5aZ.RrD4a7qwkQAplI5fwm.\",\"expiry\":1478658098},\"NawSgvrl6FEpsurpnDdHOw\":{\"token\":\"$2a$10$YSlEIf6Mr9ZP4Aq4JiIK0.W0t6UhXiqAHmHtIL/rIkwYqY2hv93J6\",\"expiry\":1478673482},\"1tf87XI54tJ96hcC77-_Fw\":{\"token\":\"$2a$10$wXdtfSXJdEIS3nyITLjCHuUyJe8semP1OxOzcp7JAMnk1oLbjgB7G\",\"expiry\":1478673812},\"BL-B4h4-5qN7pesA1VMvcA\":{\"token\":\"$2a$10$0siaQJzuSLOHOv9bZC2lg.Yo5h3gAWeHXCs1peJ/nqYwzpQpSq2kG\",\"expiry\":1478673817},\"1xE4-qYs6FRcpO0LJ8spHw\":{\"token\":\"$2a$10$pElDjDwe9sY9sD/aSkFOSOB377zb5fdWG30Fw25ZKCXH1SZ0E4A1S\",\"expiry\":1478673993},\"XTCmNjBnz0KV_ZSTfZtFdw\":{\"token\":\"$2a$10$YZTIs4m4FsB8M5z1/6vQyuFejQbO3R99XvJpewy68StPRH4depcYu\",\"expiry\":1478674493},\"7NfHAHSnQJh8LrFqr3YClQ\":{\"token\":\"$2a$10$g0bq3cRpUwT0E8ZlbiQ/Ce.BdcDpuzaoKvZLgl0lYKP4HuOHleT52\",\"expiry\":1478674688},\"YAUryy_g1jMVc5PD82w1OQ\":{\"token\":\"$2a$10$aOV5QPFr.M3oWyjCrKujmujAyEj5NxAkDUw3x/gb2oEiVHq/fUqVu\",\"expiry\":1478675063},\"9_RsZu4_hy_qhUJdMR9gmQ\":{\"token\":\"$2a$10$hkTux33fp66mZEEN5L/ZZ.c.1BXRSv/FBZ3vMZLHlQ57LsmEdmFSm\",\"expiry\":1478676028},\"7jNN1UdoKoQWN8akZnt92w\":{\"token\":\"$2a$10$vaX.rcR8YY/2or6ahpkwxe4xIsibQMOtb3sLg2C2xBWLrSYRczXJa\",\"expiry\":1478676072},\"yVsSpODXNEAnqyTsUw0hDQ\":{\"token\":\"$2a$10$A1F14xtAfYvdy1Oy.3gHterjKREdc3.JvNBCcNw440A4WD/J41yPe\",\"expiry\":1478676076},\"41n7fkz7JWqFexxMn1KEVA\":{\"token\":\"$2a$10$SSC/1ZfLawKMDcUD6sQ0W.Gv5Q/roHxYYxr/rh6eodyeaVkI/s04e\",\"expiry\":1478676276},\"wbm35C207QcIxeNQcj3Suw\":{\"token\":\"$2a$10$KaBnRes.d1U/qcV7DPAAiuxlhYTq9n6Oiz7lG1nYYCek7fxHtVrQ.\",\"expiry\":1478676351},\"dC3Be_DO-qsIYpZcxubyJQ\":{\"token\":\"$2a$10$4npklaoJaR2YjU.PipNz.uuuaA0DSUaZdXQMJbqHoh7/i5HhdS/Sm\",\"expiry\":1478676779},\"uoEzu0Zox79et_Wh_Gbk1w\":{\"token\":\"$2a$10$Wtbb3p6p4wDFN.JUKaSQru2YbFN.JtfkUAupSQ6Q2BDMRvNOTCgI.\",\"expiry\":1478677504},\"-ewD4_2QzB2qnCWlBFSLUw\":{\"token\":\"$2a$10$uArlxR8JhjHtK0f6kg0g3O7O0tsoePI3diAY9PSLc2yvU/Y1cA8aK\",\"expiry\":1478677647}}"], ["uid", "7f5e6394-44fd-4b00-a823-b91686666b33"], ["confirmed_at", "2016-10-26 06:47:27.477669"], ["updated_at", "2016-10-26 06:47:27.478225"], ["id", 1]]
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.8ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-10-26 06:45:04.769366"], ["current_sign_in_at", "2016-10-26 06:47:27.485340"], ["sign_in_count", 23], ["uid", "c3dfe465-ef04-466f-b884-a4ac93ee3b55"], ["confirmed_at", "2016-10-26 06:47:27.486979"], ["updated_at", "2016-10-26 06:47:27.487464"], ["id", 1]]
  [1m[35m (1.2ms)[0m  COMMIT
Completed 200 OK in 188ms (Views: 0.3ms | ActiveRecord: 10.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT 1  [["email", "gametracker@example.com"]]
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "users" WHERE "users"."provider" = $1 AND "users"."email" = $2  [["provider", "email"], ["email", "gametracker@example.com"]]
  [1m[36mSQL (1.1ms)[0m  [1mINSERT INTO "users" ("email", "tokens", "encrypted_password", "uid", "confirmed_at", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["email", "gametracker@example.com"], ["tokens", "{}"], ["encrypted_password", "$2a$10$TR4FjQzrA8/LHRQmlXu2SO3XVBQm7Ua.NW4RYfkL4dVseLSAU3Rui"], ["uid", "gametracker@example.com"], ["confirmed_at", "2016-10-27 05:40:29.757963"], ["created_at", "2016-10-27 05:40:29.758116"], ["updated_at", "2016-10-27 05:40:29.758116"]]
  [1m[35m (1.9ms)[0m  COMMIT
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", -1]]
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36m (0.1ms)[0m  [1mCOMMIT[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-26 23:04:58 -0700
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"pruittgoddard.b@gmail.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'pruittgoddard.b@gmail.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Completed 401 Unauthorized in 301ms (Views: 15.9ms | ActiveRecord: 6.2ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-26 23:05:16 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"pruittgoddard.b@gmail.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (3.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'pruittgoddard.b@gmail.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
Completed 401 Unauthorized in 126ms (Views: 0.4ms | ActiveRecord: 3.5ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-10-26 23:05:21 -0700
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.9ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (2.6ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"m4oO6kz152gSmxF-YFui9g\":{\"token\":\"$2a$10$ahWDSmsEdhGOPJW8uB8LZu.B9iEf40cwaBRESNs5uDxI70gpwhfma\",\"expiry\":1478761521}}"], ["uid", "14539e22-1217-41df-a32e-8315b2f7cebd"], ["confirmed_at", "2016-10-27 06:05:21.738633"], ["updated_at", "2016-10-27 06:05:21.739202"], ["id", 1]]
  [1m[36m (8.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (1.8ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "last_sign_in_ip" = $3, "current_sign_in_ip" = $4, "sign_in_count" = $5, "uid" = $6, "confirmed_at" = $7, "updated_at" = $8 WHERE "users"."id" = $9[0m  [["last_sign_in_at", "2016-10-27 06:05:21.777442"], ["current_sign_in_at", "2016-10-27 06:05:21.777442"], ["last_sign_in_ip", "127.0.0.1"], ["current_sign_in_ip", "127.0.0.1"], ["sign_in_count", 1], ["uid", "3da801d8-7317-4e40-ae68-f0ba0a3876ce"], ["confirmed_at", "2016-10-27 06:05:21.780103"], ["updated_at", "2016-10-27 06:05:21.780252"], ["id", 1]]
  [1m[35m (1.1ms)[0m  COMMIT
Completed 200 OK in 329ms (Views: 0.4ms | ActiveRecord: 20.8ms)


Started GET "/" for 127.0.0.1 at 2016-10-26 23:08:53 -0700
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/favicon.ico" for 127.0.0.1 at 2016-10-26 23:08:54 -0700

ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (7.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (16.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (78.3ms)


Started GET "/routes" for 127.0.0.1 at 2016-10-26 23:08:57 -0700

ActionController::RoutingError (No route matches [GET] "/routes"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (5.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (2.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (46.3ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36mActiveRecord::SchemaMigration Load (5.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mUser Load (1.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT 1  [["email", "gametracker@example.com"]]
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (3.7ms)[0m  UPDATE "users" SET "tokens" = $1, "encrypted_password" = $2, "uid" = $3, "confirmed_at" = $4, "updated_at" = $5 WHERE "users"."id" = $6  [["tokens", "{}"], ["encrypted_password", "$2a$10$kMpEnDz6Ty9MF7i.0GMqRe6B5UUr1yV.tNCT.eLeagQD5NDLa09wy"], ["uid", "d6a2f1c4-592b-4dc6-8833-1a9010bf57bf"], ["confirmed_at", "2016-11-15 07:01:25.544119"], ["updated_at", "2016-11-15 07:01:25.544414"], ["id", 1]]
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", -1]]
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.1ms)[0m  COMMIT
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36m (110.0ms)[0m  [1mDROP DATABASE IF EXISTS "gametracker_test"[0m
  [1m[35m (348.0ms)[0m  CREATE DATABASE "gametracker_test" ENCODING = 'unicode'
  [1m[36mSQL (0.6ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (6.6ms)[0m  CREATE TABLE "games" ("id" serial primary key, "name" character varying(255), "description" text, "created_at" timestamp, "updated_at" timestamp, "image" character varying(255), "game_type" integer NOT NULL) 
  [1m[36m (5.1ms)[0m  [1mCREATE TABLE "players" ("id" serial primary key, "name" character varying(255), "powers" text, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.5ms)[0m  CREATE TABLE "session_players" ("id" serial primary key, "score" integer, "placing" integer, "team_number" character varying(255), "player_id" integer, "session_id" integer, "created_at" timestamp, "updated_at" timestamp) 
  [1m[36m (1.9ms)[0m  [1mCREATE  INDEX  "index_session_players_on_player_id" ON "session_players" USING btree ("player_id")[0m
  [1m[35m (1.8ms)[0m  CREATE  INDEX  "index_session_players_on_session_id" ON "session_players" USING btree ("session_id")
  [1m[36m (3.3ms)[0m  [1mCREATE TABLE "sessions" ("id" serial primary key, "played" date, "notes" text, "game_id" integer, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.1ms)[0m  CREATE  INDEX  "index_sessions_on_game_id" ON "sessions" USING btree ("game_id")
  [1m[36m (4.7ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "provider" character varying DEFAULT 'email' NOT NULL, "uid" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "confirmation_token" character varying, "confirmed_at" timestamp, "confirmation_sent_at" timestamp, "unconfirmed_email" character varying, "name" character varying, "nickname" character varying, "image" character varying, "email" character varying, "tokens" json, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.1ms)[0m  CREATE  INDEX  "index_users_on_email" ON "users" USING btree ("email")
  [1m[36m (1.7ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_reset_password_token" ON "users" USING btree ("reset_password_token")[0m
  [1m[35m (1.6ms)[0m  CREATE UNIQUE INDEX  "index_users_on_uid_and_provider" ON "users" USING btree ("uid", "provider")
  [1m[36m (1.9ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL) [0m
  [1m[35m (1.6ms)[0m  CREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")
  [1m[36m (0.2ms)[0m  [1mSELECT version FROM "schema_migrations"[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20160704140141')
  [1m[36m (0.5ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20160610052711')[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20160611052115')
  [1m[36m (0.5ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20151018033613')[0m
  [1m[35m (0.4ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029020132')
  [1m[36m (0.4ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20141028030656')[0m
  [1m[35m (0.4ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029021109')
  [1m[36m (0.4ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20160611060216')[0m
  [1m[35m (0.4ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029011421')
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT 1  [["email", "gametracker@example.com"]]
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "users" WHERE "users"."provider" = $1 AND "users"."email" = $2  [["provider", "email"], ["email", "gametracker@example.com"]]
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "users" ("email", "tokens", "encrypted_password", "uid", "confirmed_at", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["email", "gametracker@example.com"], ["tokens", "{}"], ["encrypted_password", "$2a$10$U3v5W9h5rzvE1A4A1IKtguktnjnQQxyS6y8oXaO/qEEuJsO65Dd.u"], ["uid", "gametracker@example.com"], ["confirmed_at", "2016-11-15 07:09:25.178702"], ["created_at", "2016-11-15 07:09:25.178861"], ["updated_at", "2016-11-15 07:09:25.178861"]]
  [1m[35m (2.9ms)[0m  COMMIT
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", -1]]
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "players" ("id", "created_at", "updated_at") VALUES ($1, $2, $3) RETURNING "id"[0m  [["id", -1], ["created_at", "2016-11-15 07:09:25.193163"], ["updated_at", "2016-11-15 07:09:25.193163"]]
  [1m[35m (0.7ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  UPDATE "players" SET "name" = $1, "updated_at" = $2 WHERE "players"."id" = $3  [["name", "Unknown"], ["updated_at", "2016-11-15 07:09:25.195743"], ["id", -1]]
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36m (108.6ms)[0m  [1mDROP DATABASE IF EXISTS "gametracker_test"[0m
  [1m[35m (312.9ms)[0m  CREATE DATABASE "gametracker_test" ENCODING = 'unicode'
  [1m[36mSQL (0.3ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (6.6ms)[0m  CREATE TABLE "games" ("id" serial primary key, "name" character varying(255), "description" text, "created_at" timestamp, "updated_at" timestamp, "image" character varying(255), "game_type" integer NOT NULL) 
  [1m[36m (6.4ms)[0m  [1mCREATE TABLE "players" ("id" serial primary key, "name" character varying(255), "powers" text, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.8ms)[0m  CREATE TABLE "session_players" ("id" serial primary key, "score" integer, "placing" integer, "team_number" character varying(255), "player_id" integer, "session_id" integer, "created_at" timestamp, "updated_at" timestamp) 
  [1m[36m (1.5ms)[0m  [1mCREATE  INDEX  "index_session_players_on_player_id" ON "session_players" USING btree ("player_id")[0m
  [1m[35m (2.1ms)[0m  CREATE  INDEX  "index_session_players_on_session_id" ON "session_players" USING btree ("session_id")
  [1m[36m (5.2ms)[0m  [1mCREATE TABLE "sessions" ("id" serial primary key, "played" date, "notes" text, "game_id" integer, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.2ms)[0m  CREATE  INDEX  "index_sessions_on_game_id" ON "sessions" USING btree ("game_id")
  [1m[36m (4.2ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "provider" character varying DEFAULT 'email' NOT NULL, "uid" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "confirmation_token" character varying, "confirmed_at" timestamp, "confirmation_sent_at" timestamp, "unconfirmed_email" character varying, "name" character varying, "nickname" character varying, "image" character varying, "email" character varying, "tokens" json, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.6ms)[0m  CREATE  INDEX  "index_users_on_email" ON "users" USING btree ("email")
  [1m[36m (2.0ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_reset_password_token" ON "users" USING btree ("reset_password_token")[0m
  [1m[35m (1.9ms)[0m  CREATE UNIQUE INDEX  "index_users_on_uid_and_provider" ON "users" USING btree ("uid", "provider")
  [1m[36m (2.2ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL) [0m
  [1m[35m (3.9ms)[0m  CREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")
  [1m[36m (1.1ms)[0m  [1mSELECT version FROM "schema_migrations"[0m
  [1m[35m (1.8ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20160704140141')
  [1m[36m (0.5ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20160610052711')[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20160611052115')
  [1m[36m (0.5ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20151018033613')[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029020132')
  [1m[36m (0.6ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20141028030656')[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029021109')
  [1m[36m (0.4ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20160611060216')[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029011421')
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT 1  [["email", "gametracker@example.com"]]
  [1m[36m (0.3ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "users" WHERE "users"."provider" = $1 AND "users"."email" = $2  [["provider", "email"], ["email", "gametracker@example.com"]]
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "users" ("email", "tokens", "encrypted_password", "uid", "confirmed_at", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["email", "gametracker@example.com"], ["tokens", "{}"], ["encrypted_password", "$2a$10$jFPsk0rHKznkjCL0cw/HUeEy2sr9Q.bUmJ76BhNnumBsT4P4nz1Sy"], ["uid", "gametracker@example.com"], ["confirmed_at", "2016-11-15 07:09:35.912792"], ["created_at", "2016-11-15 07:09:35.912944"], ["updated_at", "2016-11-15 07:09:35.912944"]]
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", -1]]
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "players" ("id", "created_at", "updated_at") VALUES ($1, $2, $3) RETURNING "id"[0m  [["id", -1], ["created_at", "2016-11-15 07:09:35.932231"], ["updated_at", "2016-11-15 07:09:35.932231"]]
  [1m[35m (0.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "players" SET "name" = $1, "updated_at" = $2 WHERE "players"."id" = $3  [["name", "Unknown"], ["updated_at", "2016-11-15 07:09:35.935209"], ["id", -1]]
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
  [1m[36m (107.5ms)[0m  [1mDROP DATABASE IF EXISTS "gametracker_test"[0m
  [1m[35m (285.7ms)[0m  CREATE DATABASE "gametracker_test" ENCODING = 'unicode'
  [1m[36mSQL (0.2ms)[0m  [1mCREATE EXTENSION IF NOT EXISTS "plpgsql"[0m
  [1m[35m (6.9ms)[0m  CREATE TABLE "games" ("id" serial primary key, "name" character varying(255), "description" text, "created_at" timestamp, "updated_at" timestamp, "image" character varying(255), "game_type" integer NOT NULL) 
  [1m[36m (4.2ms)[0m  [1mCREATE TABLE "players" ("id" serial primary key, "name" character varying(255), "powers" text, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (2.4ms)[0m  CREATE TABLE "session_players" ("id" serial primary key, "score" integer, "placing" integer, "team_number" character varying(255), "player_id" integer, "session_id" integer, "created_at" timestamp, "updated_at" timestamp) 
  [1m[36m (1.7ms)[0m  [1mCREATE  INDEX  "index_session_players_on_player_id" ON "session_players" USING btree ("player_id")[0m
  [1m[35m (1.7ms)[0m  CREATE  INDEX  "index_session_players_on_session_id" ON "session_players" USING btree ("session_id")
  [1m[36m (4.3ms)[0m  [1mCREATE TABLE "sessions" ("id" serial primary key, "played" date, "notes" text, "game_id" integer, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (1.7ms)[0m  CREATE  INDEX  "index_sessions_on_game_id" ON "sessions" USING btree ("game_id")
  [1m[36m (4.5ms)[0m  [1mCREATE TABLE "users" ("id" serial primary key, "provider" character varying DEFAULT 'email' NOT NULL, "uid" character varying DEFAULT '' NOT NULL, "encrypted_password" character varying DEFAULT '' NOT NULL, "reset_password_token" character varying, "reset_password_sent_at" timestamp, "remember_created_at" timestamp, "sign_in_count" integer DEFAULT 0 NOT NULL, "current_sign_in_at" timestamp, "last_sign_in_at" timestamp, "current_sign_in_ip" character varying, "last_sign_in_ip" character varying, "confirmation_token" character varying, "confirmed_at" timestamp, "confirmation_sent_at" timestamp, "unconfirmed_email" character varying, "name" character varying, "nickname" character varying, "image" character varying, "email" character varying, "tokens" json, "created_at" timestamp, "updated_at" timestamp) [0m
  [1m[35m (1.7ms)[0m  CREATE  INDEX  "index_users_on_email" ON "users" USING btree ("email")
  [1m[36m (1.9ms)[0m  [1mCREATE UNIQUE INDEX  "index_users_on_reset_password_token" ON "users" USING btree ("reset_password_token")[0m
  [1m[35m (1.8ms)[0m  CREATE UNIQUE INDEX  "index_users_on_uid_and_provider" ON "users" USING btree ("uid", "provider")
  [1m[36m (2.0ms)[0m  [1mCREATE TABLE "schema_migrations" ("version" character varying NOT NULL) [0m
  [1m[35m (1.7ms)[0m  CREATE UNIQUE INDEX  "unique_schema_migrations" ON "schema_migrations"  ("version")
  [1m[36m (0.2ms)[0m  [1mSELECT version FROM "schema_migrations"[0m
  [1m[35m (0.6ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20160704140141')
  [1m[36m (0.8ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20160610052711')[0m
  [1m[35m (0.4ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20160611052115')
  [1m[36m (0.4ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20151018033613')[0m
  [1m[35m (0.4ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029020132')
  [1m[36m (0.4ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20141028030656')[0m
  [1m[35m (0.4ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029021109')
  [1m[36m (0.5ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20160611060216')[0m
  [1m[35m (0.5ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20141029011421')
  [1m[36mActiveRecord::SchemaMigration Load (0.3ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."email" = $1 LIMIT 1  [["email", "gametracker@example.com"]]
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "users" WHERE "users"."provider" = $1 AND "users"."email" = $2  [["provider", "email"], ["email", "gametracker@example.com"]]
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "users" ("email", "tokens", "encrypted_password", "uid", "confirmed_at", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["email", "gametracker@example.com"], ["tokens", "{}"], ["encrypted_password", "$2a$10$/DDfW4naAMkhtCDtShLtqO6jh03YKys1SEMH4jgF9dSiL29S4LBTq"], ["uid", "gametracker@example.com"], ["confirmed_at", "2016-11-15 07:10:00.847486"], ["created_at", "2016-11-15 07:10:00.847857"], ["updated_at", "2016-11-15 07:10:00.847857"]]
  [1m[35m (2.7ms)[0m  COMMIT
  [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", -1]]
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "players" ("id", "created_at", "updated_at") VALUES ($1, $2, $3) RETURNING "id"[0m  [["id", -1], ["created_at", "2016-11-15 07:10:00.862115"], ["updated_at", "2016-11-15 07:10:00.862115"]]
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "players" SET "name" = $1, "updated_at" = $2 WHERE "players"."id" = $3  [["name", "Unknown"], ["updated_at", "2016-11-15 07:10:00.867360"], ["id", -1]]
  [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-11-15 22:19:24 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"{{username}}", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE (email = '{{username}}' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
Completed 401 Unauthorized in 145ms (Views: 13.7ms | ActiveRecord: 1.9ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-11-15 22:19:57 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@gametracker.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (1.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@gametracker.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
Completed 401 Unauthorized in 6ms (Views: 0.5ms | ActiveRecord: 1.7ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-11-15 22:20:20 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (2.6ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (5.2ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"pAtnUwDFEgDwEgwELaK-dQ\":{\"token\":\"$2a$10$ZJe31opSHfwg8YajZGlLoOqovMyvJYHbhS6rC0ETXvyPH5D5ZgLuu\",\"expiry\":1480486820}}"], ["uid", "e759d06e-2f7b-41b8-a193-038000c670c1"], ["confirmed_at", "2016-11-16 06:20:20.908085"], ["updated_at", "2016-11-16 06:20:20.908956"], ["id", 1]]
  [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "current_sign_in_at" = $1, "sign_in_count" = $2, "uid" = $3, "confirmed_at" = $4, "updated_at" = $5 WHERE "users"."id" = $6[0m  [["current_sign_in_at", "2016-11-16 06:20:20.948526"], ["sign_in_count", 2], ["uid", "68d69f75-354c-445e-b13a-f75fda8341b4"], ["confirmed_at", "2016-11-16 06:20:20.952152"], ["updated_at", "2016-11-16 06:20:20.952971"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
Completed 200 OK in 248ms (Views: 1.6ms | ActiveRecord: 20.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/2/statistics" for 127.0.0.1 at 2016-11-25 23:51:45 -0800
  [1m[36mActiveRecord::SchemaMigration Load (1.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayerStatisticsController#show as JSON
  Parameters: {"id"=>"2"}
  [1m[35mUser Load (1.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "63c509e2-6665-4523-bbe7-9f884eab2757"]]
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 44ms (Views: 9.7ms | ActiveRecord: 5.6ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-11-25 23:51:50 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.7ms)[0m  BEGIN
  [1m[36mSQL (1.8ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"pAtnUwDFEgDwEgwELaK-dQ\":{\"token\":\"$2a$10$ZJe31opSHfwg8YajZGlLoOqovMyvJYHbhS6rC0ETXvyPH5D5ZgLuu\",\"expiry\":1480486820},\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311}}"], ["uid", "57c335e0-2ded-4744-997e-6862fcfda475"], ["confirmed_at", "2016-11-26 07:51:51.075482"], ["updated_at", "2016-11-26 07:51:51.075823"], ["id", 1]]
  [1m[35m (1.2ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-11-16 06:20:20.948526"], ["current_sign_in_at", "2016-11-26 07:51:51.087303"], ["sign_in_count", 3], ["uid", "d7657faf-006c-4ee0-af91-8435266db061"], ["confirmed_at", "2016-11-26 07:51:51.088337"], ["updated_at", "2016-11-26 07:51:51.088596"], ["id", 1]]
  [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 230ms (Views: 0.3ms | ActiveRecord: 11.9ms)


Started POST "/api/auth/sign_in" for 127.0.0.1 at 2016-11-25 23:53:45 -0800

ActionController::RoutingError (No route matches [POST] "/api/auth/sign_in"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.5ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (3.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (13.3ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.0ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (59.1ms)


Started POST "/api/auth/sign_in" for 127.0.0.1 at 2016-11-25 23:57:05 -0800

ActionController::RoutingError (No route matches [POST] "/api/auth/sign_in"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (4.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (42.8ms)


Started POST "/api/auth/sign_in" for 127.0.0.1 at 2016-11-25 23:58:29 -0800

ActionController::RoutingError (No route matches [POST] "/api/auth/sign_in"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (7.1ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (13.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (54.5ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-11-26 00:00:45 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.5ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.6ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"pAtnUwDFEgDwEgwELaK-dQ\":{\"token\":\"$2a$10$ZJe31opSHfwg8YajZGlLoOqovMyvJYHbhS6rC0ETXvyPH5D5ZgLuu\",\"expiry\":1480486820},\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845}}"], ["uid", "be97de51-28cb-49ba-a5ba-8989cedfa4e6"], ["confirmed_at", "2016-11-26 08:00:45.488410"], ["updated_at", "2016-11-26 08:00:45.488726"], ["id", 1]]
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-11-26 07:51:51.087303"], ["current_sign_in_at", "2016-11-26 08:00:45.494188"], ["sign_in_count", 4], ["uid", "942b8b30-aba8-4bb6-b4c4-ae582207a06f"], ["confirmed_at", "2016-11-26 08:00:45.494995"], ["updated_at", "2016-11-26 08:00:45.495257"], ["id", 1]]
  [1m[35m (0.6ms)[0m  COMMIT
Completed 200 OK in 196ms (Views: 0.3ms | ActiveRecord: 4.9ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-11-26 00:08:58 -0800
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (1.3ms)[0m  BEGIN
  [1m[36mSQL (1.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"pAtnUwDFEgDwEgwELaK-dQ\":{\"token\":\"$2a$10$ZJe31opSHfwg8YajZGlLoOqovMyvJYHbhS6rC0ETXvyPH5D5ZgLuu\",\"expiry\":1480486820},\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339}}"], ["uid", "c495925d-c745-42d3-8e81-0cccfb96135c"], ["confirmed_at", "2016-11-26 08:08:59.138449"], ["updated_at", "2016-11-26 08:08:59.144473"], ["id", 1]]
  [1m[35m (4.7ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-11-26 08:00:45.494188"], ["current_sign_in_at", "2016-11-26 08:08:59.154796"], ["sign_in_count", 5], ["uid", "67b91962-c258-4fe6-92cf-540097c1983e"], ["confirmed_at", "2016-11-26 08:08:59.155617"], ["updated_at", "2016-11-26 08:08:59.155825"], ["id", 1]]
  [1m[36m (0.6ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 234ms (Views: 0.3ms | ActiveRecord: 10.7ms)


Started GET "/games/list" for 127.0.0.1 at 2016-11-26 00:09:04 -0800
Processing by GamesController#list as HTML
  [1m[35mUser Load (1.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "67b91962-c258-4fe6-92cf-540097c1983e"]]
  [1m[36mGame Load (6.9ms)[0m  [1mSELECT "games".* FROM "games"  ORDER BY name[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.59ms)
Completed 200 OK in 184ms (Views: 12.8ms | ActiveRecord: 10.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-04 01:21:08 -0800
  [1m[36mActiveRecord::SchemaMigration Load (4.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (3.3ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.7ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868}}"], ["uid", "65a558dc-2437-40b2-bcef-f6ad1aa359b9"], ["confirmed_at", "2016-12-04 09:21:08.305911"], ["updated_at", "2016-12-04 09:21:08.306329"], ["id", 1]]
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-11-26 08:08:59.154796"], ["current_sign_in_at", "2016-12-04 09:21:08.321847"], ["sign_in_count", 6], ["uid", "90423999-2c44-487d-9830-dae9a25942ca"], ["confirmed_at", "2016-12-04 09:21:08.323078"], ["updated_at", "2016-12-04 09:21:08.323548"], ["id", 1]]
  [1m[35m (0.6ms)[0m  COMMIT
Completed 200 OK in 184ms (Views: 1.8ms | ActiveRecord: 11.5ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:14:45 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (1.5ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (1.6ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286}}"], ["uid", "7c769601-d7fc-454e-825b-9d7d733e52d0"], ["confirmed_at", "2016-12-09 02:14:46.121198"], ["updated_at", "2016-12-09 02:14:46.121577"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-04 09:21:08.321847"], ["current_sign_in_at", "2016-12-09 02:14:46.136719"], ["sign_in_count", 7], ["uid", "b625d4f7-4b3b-4276-a555-d6b42d4bfa5f"], ["confirmed_at", "2016-12-09 02:14:46.137793"], ["updated_at", "2016-12-09 02:14:46.138087"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
Completed 200 OK in 166ms (Views: 1.9ms | ActiveRecord: 7.9ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:14:51 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (1.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291}}"], ["uid", "983fef3b-3343-4b7d-8447-60e8632d19cc"], ["confirmed_at", "2016-12-09 02:14:51.631059"], ["updated_at", "2016-12-09 02:14:51.631455"], ["id", 1]]
  [1m[35m (3.9ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-09 02:14:46.136719"], ["current_sign_in_at", "2016-12-09 02:14:51.638026"], ["sign_in_count", 8], ["uid", "6613821e-5d5c-478a-937b-fe152a4049db"], ["confirmed_at", "2016-12-09 02:14:51.639562"], ["updated_at", "2016-12-09 02:14:51.640013"], ["id", 1]]
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 190ms (Views: 0.3ms | ActiveRecord: 7.6ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:14:56 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296}}"], ["uid", "9efac8f4-f321-415b-a200-9df95147b097"], ["confirmed_at", "2016-12-09 02:14:56.757197"], ["updated_at", "2016-12-09 02:14:56.757565"], ["id", 1]]
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 02:14:51.638026"], ["current_sign_in_at", "2016-12-09 02:14:56.763660"], ["sign_in_count", 9], ["uid", "1a7f05e8-a918-45ce-b24a-9d9e02561e11"], ["confirmed_at", "2016-12-09 02:14:56.764932"], ["updated_at", "2016-12-09 02:14:56.765747"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
Completed 200 OK in 163ms (Views: 0.2ms | ActiveRecord: 5.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:15:07 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (3.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308}}"], ["uid", "8ff1fbee-10c7-464f-8d02-3250000ce99e"], ["confirmed_at", "2016-12-09 02:15:08.001770"], ["updated_at", "2016-12-09 02:15:08.002274"], ["id", 1]]
  [1m[35m (2.8ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.6ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-09 02:14:56.763660"], ["current_sign_in_at", "2016-12-09 02:15:08.009675"], ["sign_in_count", 10], ["uid", "5cafdfd7-9f4d-41dd-a170-5f2cc9e40fb7"], ["confirmed_at", "2016-12-09 02:15:08.012428"], ["updated_at", "2016-12-09 02:15:08.012717"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 192ms (Views: 0.3ms | ActiveRecord: 10.2ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:15:13 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (2.1ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (5.3ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.8ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313}}"], ["uid", "32541ae5-f298-4f7f-a0a6-2ad0631c255b"], ["confirmed_at", "2016-12-09 02:15:13.965553"], ["updated_at", "2016-12-09 02:15:13.966169"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (4.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 02:15:08.009675"], ["current_sign_in_at", "2016-12-09 02:15:13.977630"], ["sign_in_count", 11], ["uid", "8cedcec2-69ed-4e54-9b10-205a0ca023a5"], ["confirmed_at", "2016-12-09 02:15:13.978872"], ["updated_at", "2016-12-09 02:15:13.979299"], ["id", 1]]
  [1m[35m (1.0ms)[0m  COMMIT
Completed 200 OK in 277ms (Views: 0.3ms | ActiveRecord: 14.4ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:16:07 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (3.6ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367}}"], ["uid", "ffdf2ec7-f755-4b02-adb0-516d740ac549"], ["confirmed_at", "2016-12-09 02:16:07.472007"], ["updated_at", "2016-12-09 02:16:07.472637"], ["id", 1]]
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-09 02:15:13.977630"], ["current_sign_in_at", "2016-12-09 02:16:07.482965"], ["sign_in_count", 12], ["uid", "95e20284-1734-45b4-8020-03b81af5f620"], ["confirmed_at", "2016-12-09 02:16:07.485047"], ["updated_at", "2016-12-09 02:16:07.496351"], ["id", 1]]
  [1m[36m (2.1ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 205ms (Views: 0.3ms | ActiveRecord: 9.7ms)


Started GET "/" for 127.0.0.1 at 2016-12-08 18:16:29 -0800
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/favicon.ico" for 127.0.0.1 at 2016-12-08 18:16:30 -0800

ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (9.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (69.1ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:17:36 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456}}"], ["uid", "d5ac1e43-fbb0-4754-8051-25d931afc92e"], ["confirmed_at", "2016-12-09 02:17:36.769822"], ["updated_at", "2016-12-09 02:17:36.770830"], ["id", 1]]
  [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 02:16:07.482965"], ["current_sign_in_at", "2016-12-09 02:17:36.783230"], ["sign_in_count", 13], ["uid", "a9398a93-0029-42ad-b1f7-1542f48e8c0d"], ["confirmed_at", "2016-12-09 02:17:36.784883"], ["updated_at", "2016-12-09 02:17:36.785496"], ["id", 1]]
  [1m[35m (0.9ms)[0m  COMMIT
Completed 200 OK in 174ms (Views: 0.3ms | ActiveRecord: 4.7ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:18:16 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (2.7ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496}}"], ["uid", "dceb60ef-0cb7-4f88-a17e-a0db43826503"], ["confirmed_at", "2016-12-09 02:18:16.212839"], ["updated_at", "2016-12-09 02:18:16.213497"], ["id", 1]]
  [1m[35m (0.9ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-09 02:17:36.783230"], ["current_sign_in_at", "2016-12-09 02:18:16.227046"], ["sign_in_count", 14], ["uid", "2534e16e-7641-4109-b00b-39355ac40609"], ["confirmed_at", "2016-12-09 02:18:16.228406"], ["updated_at", "2016-12-09 02:18:16.228878"], ["id", 1]]
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 210ms (Views: 0.6ms | ActiveRecord: 6.8ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:20:13 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (8.9ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (5.7ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613}}"], ["uid", "79481b87-17c3-4d83-8016-e5020643c578"], ["confirmed_at", "2016-12-09 02:20:13.557973"], ["updated_at", "2016-12-09 02:20:13.559252"], ["id", 1]]
  [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (4.6ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 02:18:16.227046"], ["current_sign_in_at", "2016-12-09 02:20:13.574029"], ["sign_in_count", 15], ["uid", "32f41e29-7518-4a94-9e6b-2827d565fe2d"], ["confirmed_at", "2016-12-09 02:20:13.576167"], ["updated_at", "2016-12-09 02:20:13.576791"], ["id", 1]]
  [1m[35m (3.5ms)[0m  COMMIT
Completed 200 OK in 235ms (Views: 0.9ms | ActiveRecord: 28.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:25:44 -0800
  [1m[36mActiveRecord::SchemaMigration Load (1.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (3.9ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944}}"], ["uid", "4d6a92a1-0135-485c-8b61-b01dea38be13"], ["confirmed_at", "2016-12-09 02:25:44.361793"], ["updated_at", "2016-12-09 02:25:44.362509"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 02:20:13.574029"], ["current_sign_in_at", "2016-12-09 02:25:44.379654"], ["sign_in_count", 16], ["uid", "9b947eb4-25ab-4dcd-a043-8facac421514"], ["confirmed_at", "2016-12-09 02:25:44.381059"], ["updated_at", "2016-12-09 02:25:44.381474"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
Completed 200 OK in 196ms (Views: 2.0ms | ActiveRecord: 16.9ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 18:25:51 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (1.8ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.4ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951}}"], ["uid", "48b3379a-34ed-4f2d-8432-a634f3bfe6d2"], ["confirmed_at", "2016-12-09 02:25:51.654404"], ["updated_at", "2016-12-09 02:25:51.655030"], ["id", 1]]
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.2ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-09 02:25:44.379654"], ["current_sign_in_at", "2016-12-09 02:25:51.667488"], ["sign_in_count", 17], ["uid", "df11e9fb-7702-480f-8346-d9a4cc8f1f8f"], ["confirmed_at", "2016-12-09 02:25:51.668698"], ["updated_at", "2016-12-09 02:25:51.669154"], ["id", 1]]
  [1m[36m (0.7ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 198ms (Views: 0.2ms | ActiveRecord: 5.7ms)


Started GET "/favicon.ico" for 127.0.0.1 at 2016-12-08 18:26:25 -0800

ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.4ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (19.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.9ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (94.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 19:16:42 -0800
  [1m[36mActiveRecord::SchemaMigration Load (2.6ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (3.3ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002}}"], ["uid", "b4146c4a-c3dd-4464-a274-009666bb5021"], ["confirmed_at", "2016-12-09 03:16:42.879920"], ["updated_at", "2016-12-09 03:16:42.880995"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 02:25:51.667488"], ["current_sign_in_at", "2016-12-09 03:16:42.904763"], ["sign_in_count", 18], ["uid", "ac4f91e5-8286-418e-b955-9d66b5985643"], ["confirmed_at", "2016-12-09 03:16:42.906535"], ["updated_at", "2016-12-09 03:16:42.907001"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
Completed 200 OK in 170ms (Views: 1.4ms | ActiveRecord: 7.8ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-08 19:25:14 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (1.8ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.5ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"BUplOUpysKFb0cKvAFVe1A\":{\"token\":\"$2a$10$xqOixFw513Hqcl6c6IkjuOq9zzOFSrgZKInUgu96tAhDCnz11nu7q\",\"expiry\":1481356311},\"oiqvdCUzyV7IQ_pkUpIAGg\":{\"token\":\"$2a$10$w5Zh9HHWb7iygUWdLSKNEuI7XPoN.KzKAAEC4ulQqoBCsvlsrMize\",\"expiry\":1481356845},\"pWiswjvDggijmMmy54-MIQ\":{\"token\":\"$2a$10$EC1Jp3v3zzkrArIracEHUeQe9OsU0V36g/bJ6p5YJSavuDJyPS/j2\",\"expiry\":1481357339},\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514}}"], ["uid", "1523f1ff-2247-4396-8856-d0fbdc955b93"], ["confirmed_at", "2016-12-09 03:25:14.680828"], ["updated_at", "2016-12-09 03:25:14.682184"], ["id", 1]]
  [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 03:16:42.904763"], ["current_sign_in_at", "2016-12-09 03:25:14.715140"], ["sign_in_count", 19], ["uid", "2ebe7722-b1e6-4e8c-bc02-a804abbc93f0"], ["confirmed_at", "2016-12-09 03:25:14.716556"], ["updated_at", "2016-12-09 03:25:14.717059"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
Completed 200 OK in 196ms (Views: 1.5ms | ActiveRecord: 11.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-10 11:42:20 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.7ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (3.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514},\"EEzuKUw4dvQCCwPR2UyBsw\":{\"token\":\"$2a$10$gzOgwpcGeKWVinQjJ8YN../xR/W0fNj07hm9v74VSTj7qzJradvo6\",\"expiry\":1482608541}}"], ["uid", "241ba52a-ad60-4bbe-96cb-244c3d08b3f0"], ["confirmed_at", "2016-12-10 19:42:21.234333"], ["updated_at", "2016-12-10 19:42:21.238677"], ["id", 1]]
  [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-09 03:25:14.715140"], ["current_sign_in_at", "2016-12-10 19:42:21.276427"], ["sign_in_count", 20], ["uid", "e6e16ed3-f1b2-4cf8-9399-98cba85af67e"], ["confirmed_at", "2016-12-10 19:42:21.278203"], ["updated_at", "2016-12-10 19:42:21.278714"], ["id", 1]]
  [1m[35m (4.5ms)[0m  COMMIT
Completed 200 OK in 223ms (Views: 1.7ms | ActiveRecord: 12.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-10 12:18:49 -0800
  [1m[36mActiveRecord::SchemaMigration Load (3.5ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.7ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514},\"EEzuKUw4dvQCCwPR2UyBsw\":{\"token\":\"$2a$10$gzOgwpcGeKWVinQjJ8YN../xR/W0fNj07hm9v74VSTj7qzJradvo6\",\"expiry\":1482608541},\"NdUE5y2B8onezQoQ70JN4Q\":{\"token\":\"$2a$10$bcZhL7Isog.2PyBKIDAgxOpIae7RIx52fCrlFpz5vOfeMm2G898ZC\",\"expiry\":1482610730}}"], ["uid", "1180784f-6e51-4e63-ae8b-3751acff8f51"], ["confirmed_at", "2016-12-10 20:18:50.246428"], ["updated_at", "2016-12-10 20:18:50.248951"], ["id", 1]]
  [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-10 19:42:21.276427"], ["current_sign_in_at", "2016-12-10 20:18:50.288436"], ["sign_in_count", 21], ["uid", "ca6a0136-ff59-4746-9f58-a5d8a830a132"], ["confirmed_at", "2016-12-10 20:18:50.290296"], ["updated_at", "2016-12-10 20:18:50.290748"], ["id", 1]]
  [1m[35m (1.1ms)[0m  COMMIT
Completed 200 OK in 227ms (Views: 2.0ms | ActiveRecord: 7.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-10 12:26:13 -0800
  [1m[36mActiveRecord::SchemaMigration Load (2.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514},\"EEzuKUw4dvQCCwPR2UyBsw\":{\"token\":\"$2a$10$gzOgwpcGeKWVinQjJ8YN../xR/W0fNj07hm9v74VSTj7qzJradvo6\",\"expiry\":1482608541},\"NdUE5y2B8onezQoQ70JN4Q\":{\"token\":\"$2a$10$bcZhL7Isog.2PyBKIDAgxOpIae7RIx52fCrlFpz5vOfeMm2G898ZC\",\"expiry\":1482610730},\"uD8azfh8Rr0w0dTWlu-EZA\":{\"token\":\"$2a$10$VR2an6GALqDFk.mfXmZGOeikAI2YENEna8HQ455O/6zO88jjwjR16\",\"expiry\":1482611174}}"], ["uid", "a6cedd57-86b9-4cae-ac79-60a4879d37ab"], ["confirmed_at", "2016-12-10 20:26:14.119142"], ["updated_at", "2016-12-10 20:26:14.120912"], ["id", 1]]
  [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-10 20:18:50.288436"], ["current_sign_in_at", "2016-12-10 20:26:14.173786"], ["sign_in_count", 22], ["uid", "30d04a7d-2232-4ce1-a453-2290622fc459"], ["confirmed_at", "2016-12-10 20:26:14.175505"], ["updated_at", "2016-12-10 20:26:14.176046"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
Completed 200 OK in 316ms (Views: 1.8ms | ActiveRecord: 13.6ms)


Started GET "/games/list" for 127.0.0.1 at 2016-12-10 12:26:19 -0800
Processing by GamesController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "30d04a7d-2232-4ce1-a453-2290622fc459"]]
  [1m[35mGame Load (5.8ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (8.32ms)
Completed 200 OK in 167ms (Views: 16.0ms | ActiveRecord: 7.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-10 12:26:23 -0800
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (3.9ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (0.6ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514},\"EEzuKUw4dvQCCwPR2UyBsw\":{\"token\":\"$2a$10$gzOgwpcGeKWVinQjJ8YN../xR/W0fNj07hm9v74VSTj7qzJradvo6\",\"expiry\":1482608541},\"NdUE5y2B8onezQoQ70JN4Q\":{\"token\":\"$2a$10$bcZhL7Isog.2PyBKIDAgxOpIae7RIx52fCrlFpz5vOfeMm2G898ZC\",\"expiry\":1482610730},\"uD8azfh8Rr0w0dTWlu-EZA\":{\"token\":\"$2a$10$VR2an6GALqDFk.mfXmZGOeikAI2YENEna8HQ455O/6zO88jjwjR16\",\"expiry\":1482611174},\"B-df0VGadaTQ5fWQ3UnxQg\":{\"token\":\"$2a$10$CRKSvoDH1HOqCcUsgAvWlOOUB120fUirMM2yjEJXGhY./uezM/ee6\",\"expiry\":1482611183}}"], ["uid", "8d40374e-6b99-4f0e-9acd-fe6d5a142081"], ["confirmed_at", "2016-12-10 20:26:23.774052"], ["updated_at", "2016-12-10 20:26:23.775797"], ["id", 1]]
  [1m[35m (5.1ms)[0m  COMMIT
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-10 20:26:14.173786"], ["current_sign_in_at", "2016-12-10 20:26:23.786775"], ["sign_in_count", 23], ["uid", "511d4427-3122-4a57-9682-94115956d05a"], ["confirmed_at", "2016-12-10 20:26:23.788422"], ["updated_at", "2016-12-10 20:26:23.788893"], ["id", 1]]
  [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 213ms (Views: 0.4ms | ActiveRecord: 11.8ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:28:00 -0800
  [1m[36mActiveRecord::SchemaMigration Load (1.9ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "30d04a7d-2232-4ce1-a453-2290622fc459"]]
Completed 401 Unauthorized in 68ms (Views: 9.3ms | ActiveRecord: 3.7ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-10 12:28:09 -0800
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1[0m
  [1m[35m (0.2ms)[0m  BEGIN
  [1m[36mSQL (6.9ms)[0m  [1mUPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5[0m  [["tokens", "{\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514},\"EEzuKUw4dvQCCwPR2UyBsw\":{\"token\":\"$2a$10$gzOgwpcGeKWVinQjJ8YN../xR/W0fNj07hm9v74VSTj7qzJradvo6\",\"expiry\":1482608541},\"NdUE5y2B8onezQoQ70JN4Q\":{\"token\":\"$2a$10$bcZhL7Isog.2PyBKIDAgxOpIae7RIx52fCrlFpz5vOfeMm2G898ZC\",\"expiry\":1482610730},\"uD8azfh8Rr0w0dTWlu-EZA\":{\"token\":\"$2a$10$VR2an6GALqDFk.mfXmZGOeikAI2YENEna8HQ455O/6zO88jjwjR16\",\"expiry\":1482611174},\"B-df0VGadaTQ5fWQ3UnxQg\":{\"token\":\"$2a$10$CRKSvoDH1HOqCcUsgAvWlOOUB120fUirMM2yjEJXGhY./uezM/ee6\",\"expiry\":1482611183},\"dNz-6bmmYmeOOs2jDywiag\":{\"token\":\"$2a$10$toYcyDEu8PDAm3DhhlqnbeZiujXO3hmH9K1jbZAoYJGnC6vDFSO2e\",\"expiry\":1482611289}}"], ["uid", "40c28144-d16d-4935-aa4d-8137476a5bb0"], ["confirmed_at", "2016-12-10 20:28:09.671418"], ["updated_at", "2016-12-10 20:28:09.672587"], ["id", 1]]
  [1m[35m (2.4ms)[0m  COMMIT
  [1m[36m (0.1ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.6ms)[0m  UPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7  [["last_sign_in_at", "2016-12-10 20:26:23.786775"], ["current_sign_in_at", "2016-12-10 20:28:09.698248"], ["sign_in_count", 24], ["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"], ["confirmed_at", "2016-12-10 20:28:09.700274"], ["updated_at", "2016-12-10 20:28:09.700941"], ["id", 1]]
  [1m[36m (2.4ms)[0m  [1mCOMMIT[0m
Completed 200 OK in 313ms (Views: 0.3ms | ActiveRecord: 21.7ms)


Started GET "/players/list" for 127.0.0.1 at 2016-12-10 12:28:11 -0800
Processing by PlayersController#list as HTML
  [1m[35mUser Load (1.1ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Load (2.7ms)[0m  [1mSELECT "players".* FROM "players"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (0.72ms)
Completed 200 OK in 173ms (Views: 3.4ms | ActiveRecord: 5.9ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:28:12 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.31ms)
Completed 200 OK in 9ms (Views: 4.1ms | ActiveRecord: 0.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:28:13 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Load (1.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 20ms (Views: 12.5ms | ActiveRecord: 1.3ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-12-10 12:28:13 -0800
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Exists (0.2ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35m (3.8ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.5ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (4.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (1.7ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (1.6ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (4.3ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (40.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (153.35ms)
Completed 200 OK in 195ms (Views: 90.7ms | ActiveRecord: 68.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:28:45 -0800
  [1m[36mActiveRecord::SchemaMigration Load (1.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:28:45 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (4.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Load (6.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.18ms)
Completed 200 OK in 22ms (Views: 7.8ms | ActiveRecord: 10.2ms)
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
Completed 200 OK in 202ms (Views: 9.7ms | ActiveRecord: 2.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:28:46 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.38ms)
Completed 200 OK in 52ms (Views: 12.3ms | ActiveRecord: 4.5ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-12-10 12:28:46 -0800
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[35mPlayer Exists (3.3ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36m (0.5ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (2.0ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.7ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (4.1ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.5ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (0.9ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (8.1ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (53.2ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (147.91ms)
Completed 200 OK in 174ms (Views: 69.0ms | ActiveRecord: 83.6ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:31:20 -0800
  [1m[36mActiveRecord::SchemaMigration Load (2.0ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:31:20 -0800
  [1m[36mActiveRecord::SchemaMigration Load (4.0ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
Completed 200 OK in 282ms (Views: 13.3ms | ActiveRecord: 6.4ms)
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.48ms)
Completed 200 OK in 285ms (Views: 11.8ms | ActiveRecord: 14.6ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:31:21 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (2.6ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Load (3.6ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.15ms)
Completed 200 OK in 25ms (Views: 0.5ms | ActiveRecord: 6.1ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-12-10 12:31:21 -0800
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[36mPlayer Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35m (0.9ms)[0m  SELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)
[active_model_serializers]   [1m[36mGame Load (2.8ms)[0m  [1mSELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.4ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 26]]
[active_model_serializers]   [1m[36mGame Load (1.0ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 11]]
[active_model_serializers]   [1m[36mGame Load (0.6ms)[0m  [1mSELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1[0m
[active_model_serializers]   [1m[35mGame Load (0.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 43]]
[active_model_serializers]   [1m[36mSessionPlayer Load (2.5ms)[0m  [1mSELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery[0m
[active_model_serializers]   [1m[35m (4.5ms)[0m  
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak
[active_model_serializers]   [1m[36m (59.0ms)[0m  [1m
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;[0m
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (142.46ms)
Completed 200 OK in 170ms (Views: 55.9ms | ActiveRecord: 88.4ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:31:32 -0800


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:31:32 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.0ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
Completed 200 OK in 6ms (Views: 1.4ms | ActiveRecord: 2.0ms)
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (2.0ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.36ms)
Completed 200 OK in 48ms (Views: 9.2ms | ActiveRecord: 4.5ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:31:32 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 3ms (Views: 0.6ms | ActiveRecord: 0.5ms)


Started GET "/players/1/statistics" for 127.0.0.1 at 2016-12-10 12:31:32 -0800
Processing by PlayerStatisticsController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.4ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "95121ac1-edee-4771-b68b-98fd9c0227cd"]]
  [1m[35mPlayer Exists (0.4ms)[0m  SELECT  1 AS one FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36m (0.7ms)[0m  [1mSELECT DISTINCT COUNT(DISTINCT "session_players"."session_id") FROM "session_players" WHERE (player_id = 1)[0m
[active_model_serializers]   [1m[35mGame Load (3.0ms)[0m  SELECT  game_id, count(game_id) as session_count FROM (SELECT sessions.game_id FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery GROUP BY game_id  ORDER BY count(game_id) desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 26]]
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 11]]
[active_model_serializers]   [1m[35mGame Load (2.3ms)[0m  SELECT  game_id,
                         sum(subquery.didWin) / count(*)::float as win_percentage FROM (SELECT sessions.game_id,
                          CASE MAX("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id, sessions.game_id) subquery GROUP BY game_id  ORDER BY win_percentage asc LIMIT 1
[active_model_serializers]   [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 43]]
[active_model_serializers]   [1m[35mSessionPlayer Load (1.0ms)[0m  SELECT sum(subquery.didWin) / count(*)::float as win_percent FROM (SELECT CASE MIN("placing") WHEN 1 THEN 1 ELSE 0 END as didWin  FROM "session_players" INNER JOIN "sessions" ON "sessions"."id" = "session_players"."session_id" WHERE (player_id = 1) GROUP BY sessions.id) subquery
[active_model_serializers]   [1m[36m (2.6ms)[0m  [1m
          with new_streaks as (
              select
                sp."placing",
                s.played as "played",
                s.created_at,
              --new streak
              case when
                "placing" = 1 and
                lag("placing") over (order by played,s.created_at) > 1
                then 1
              --no new streak
                else 0
              end new_streak
              from
                sessions s
              inner join session_players sp on s.id = sp.session_id
              inner join
              (
                select session_id, MIN("placing") as min_placing
                from session_players
                group by session_id
              ) sp1 on sp1.session_id = sp.session_id and sp."placing" = sp1.min_placing
              where sp.player_id = 1
          ),
          streak_no as (
          --  Assigning a unique number to each streak.
          select
          --  In order to be able to count the number of records
          --  of a streak, we first need to assign a unique number
          --  to each streak:
              sum(new_streak) over (order by played,created_at) streak_no
          from
              new_streaks
          where
          --  We're only interested in winning streaks:
              "placing" = 1
          ),
          records_per_streak as (
            select
              count(*) counter,
              streak_no
            from
              streak_no
            group by
              streak_no
          )

          select
            max(counter) longest_streak
          from
            records_per_streak[0m
[active_model_serializers]   [1m[35m (59.5ms)[0m  
        SELECT
        S1.ID,
        T1."placing",
        (
            SELECT 1 + COUNT(*)                 -- Earlier games with the same player
            FROM sessions S2
            inner join session_players T2 on S2.id = T2.session_id
            where ((T1."placing" > 1 and T2."placing" > 1) or (T1."placing" = 1 and T2."placing" = 1))
            and T1.player_id = T2.player_id
            AND (S1.played > S2.played OR (S1.played = S2.played AND S1.created_at > S2.created_at))
            AND NOT EXISTS (
              SELECT *                    -- The games in between, with the same player but opposite result.
              FROM sessions S3
              inner join session_players T3 on S3.id = T3.session_id
              WHERE
                  ((T2."placing" > 1 and T3."placing" = 1) or (T2."placing" = 1 and T3."placing" > 1))
                  AND T1.player_id = T3.player_id
                  AND (S3.played > S2.played OR (S2.played = S3.played AND S3.created_at > S2.created_at))
	                AND (S3.played < S1.played OR (S1.played = S3.played AND S3.created_at < S1.created_at))
            )
        ) streak
        FROM sessions S1
        --TODO get this joining
        inner join session_players T1 on T1.session_id = S1.id
        where T1.player_id = 1
        order by S1.played desc, S1.created_at desc
        limit 1;
[active_model_serializers] Rendered PlayerStatisticSerializer with ActiveModel::Serializer::Adapter::Attributes (139.61ms)
Completed 200 OK in 168ms (Views: 56.2ms | ActiveRecord: 85.4ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:34:00 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 6ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2016-12-10 12:34:05 -0800
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.7ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (2.6ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"v_a8u_OWDsOUTyKr5agLsg\":{\"token\":\"$2a$10$dMDdlgWy5cuBlKz4e5HG/uziNPnXFL3twAbL8A4j1r/mqRA3o43s2\",\"expiry\":1482052868},\"VY04lrPW5XF8hvApBi40fg\":{\"token\":\"$2a$10$JjmsRtFV./gMRi7J8s5.r.WMjL.H6ie7g9MhmxFH/soUPoI/k7g8m\",\"expiry\":1482459286},\"p8q9DcE97HxOwB_hkowG2g\":{\"token\":\"$2a$10$mvmreYS2q4/6qSpiAgdXDeO7Fbhm9N9RiuS6ph15dlbEG6mEcDu9W\",\"expiry\":1482459291},\"5WnXwyaPM6Tyw0chgpzo6g\":{\"token\":\"$2a$10$XpsWG8URi3xSIE5ygCB6U.V4umOzIxW4zniyhP0rHBEwIOfu4S/gK\",\"expiry\":1482459296},\"XgTKku1Eh3104byIyjS5Sg\":{\"token\":\"$2a$10$Xm5rDH67t0bihIpoofZmMOKj1prC45fLxRY4T6wcFivr/qrRWTDLu\",\"expiry\":1482459308},\"qOB9FmZQ6TaduwW1GnyPxw\":{\"token\":\"$2a$10$YYz1GjH9FKBkWu2Y68MN2O.CMVDT71ziq4nEeBrk1pdMyi3k1cJVy\",\"expiry\":1482459313},\"oq9h1eDfwp3K7GUxE4A08A\":{\"token\":\"$2a$10$oSyfYVV0MH3UWHKmUwqisev5VPaw864X0BG/hSPIm6z4qTto6mIOq\",\"expiry\":1482459367},\"TnUU_7rDyX_p_oG4YsVDQA\":{\"token\":\"$2a$10$cz6AGPAoMxVScLPT.QDo4OYmgx77WYDzAl0QJgN4ba5Se2FWJEvV6\",\"expiry\":1482459456},\"qCbxQWzq3Zj7uEzvveD0BA\":{\"token\":\"$2a$10$92zhphfxutI0OiniztPRGu57lrolpTdRb8T3WK0jkBy3EFueSDklO\",\"expiry\":1482459496},\"Q6hYXU1DNrenMiTREytdjQ\":{\"token\":\"$2a$10$c5L.YWafE3ex95ohdCCxdOk0P4JDgZh6BBD1qAfb38zcAmTCJs2xK\",\"expiry\":1482459613},\"OrScRk3w7t1JT8tm8p9_jg\":{\"token\":\"$2a$10$tz0f0YSYg0sLumppVBe2lusPiyjP9EjWztAqhms4z/Dv2NqJDxyoi\",\"expiry\":1482459944},\"zq8CXTTICEYqGZY30owiJw\":{\"token\":\"$2a$10$pIo/Rm.SIcHNzFLaqperi.wK2b6hansWGNf88gF/TAp9ZQLRB.4au\",\"expiry\":1482459951},\"yaKchXgyeYlHJJfdYOXm2Q\":{\"token\":\"$2a$10$XATbAwDD4t2QG52pybRPpesux0CoOVFdYBH8oUFCggFzmgSUMEA..\",\"expiry\":1482463002},\"Ait4jRm1SDUldXLtbsnzIw\":{\"token\":\"$2a$10$gB3/.1exLkcJkxq.03ZtX.l2y7w5FJjJO8UKUuWiqX0K0owl0z4o2\",\"expiry\":1482463514},\"EEzuKUw4dvQCCwPR2UyBsw\":{\"token\":\"$2a$10$gzOgwpcGeKWVinQjJ8YN../xR/W0fNj07hm9v74VSTj7qzJradvo6\",\"expiry\":1482608541},\"NdUE5y2B8onezQoQ70JN4Q\":{\"token\":\"$2a$10$bcZhL7Isog.2PyBKIDAgxOpIae7RIx52fCrlFpz5vOfeMm2G898ZC\",\"expiry\":1482610730},\"uD8azfh8Rr0w0dTWlu-EZA\":{\"token\":\"$2a$10$VR2an6GALqDFk.mfXmZGOeikAI2YENEna8HQ455O/6zO88jjwjR16\",\"expiry\":1482611174},\"B-df0VGadaTQ5fWQ3UnxQg\":{\"token\":\"$2a$10$CRKSvoDH1HOqCcUsgAvWlOOUB120fUirMM2yjEJXGhY./uezM/ee6\",\"expiry\":1482611183},\"dNz-6bmmYmeOOs2jDywiag\":{\"token\":\"$2a$10$toYcyDEu8PDAm3DhhlqnbeZiujXO3hmH9K1jbZAoYJGnC6vDFSO2e\",\"expiry\":1482611289},\"RF58aFLDlAd7XRqKePaq_A\":{\"token\":\"$2a$10$RqRtjE/.Cp0MoDhuVgLNUODhA2sxw149D6lM6.vzbavScQh6deWWi\",\"expiry\":1482611645}}"], ["uid", "2f0ce57e-a8a6-430d-804f-6f030de183cd"], ["confirmed_at", "2016-12-10 20:34:05.804679"], ["updated_at", "2016-12-10 20:34:05.806057"], ["id", 1]]
  [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-10 20:28:09.698248"], ["current_sign_in_at", "2016-12-10 20:34:05.840162"], ["sign_in_count", 25], ["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"], ["confirmed_at", "2016-12-10 20:34:05.841726"], ["updated_at", "2016-12-10 20:34:05.842248"], ["id", 1]]
  [1m[35m (0.8ms)[0m  COMMIT
Completed 200 OK in 213ms (Views: 0.3ms | ActiveRecord: 8.8ms)


Started GET "/players/list" for 127.0.0.1 at 2016-12-10 12:34:07 -0800
Processing by PlayersController#list as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mPlayer Load (6.1ms)[0m  SELECT "players".* FROM "players"
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.37ms)
Completed 200 OK in 152ms (Views: 3.1ms | ActiveRecord: 7.4ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:34:08 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (0.5ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mPlayer Load (0.4ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.3ms)
Completed 200 OK in 8ms (Views: 2.6ms | ActiveRecord: 0.8ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:34:08 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[36mUser Load (1.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mPlayer Load (1.6ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.17ms)
Completed 200 OK in 5ms (Views: 0.6ms | ActiveRecord: 2.9ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:34:15 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (2.7ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 5ms (Views: 0.4ms | ActiveRecord: 2.7ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:34:15 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mPlayer Load (0.8ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.16ms)
Completed 200 OK in 5ms (Views: 2.4ms | ActiveRecord: 1.0ms)


Started GET "/players/1" for 127.0.0.1 at 2016-12-10 12:34:15 -0800
Processing by PlayersController#show as HTML
  Parameters: {"id"=>"1"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered PlayerSerializer with ActiveModel::Serializer::Adapter::Attributes (0.14ms)
Completed 200 OK in 6ms (Views: 0.5ms | ActiveRecord: 0.6ms)


Started GET "/sessions/list" for 127.0.0.1 at 2016-12-10 12:34:38 -0800
Processing by SessionsController#list as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mSession Load (0.7ms)[0m  [1mSELECT "sessions".* FROM "sessions"[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (15.87ms)
Completed 200 OK in 49ms (Views: 36.6ms | ActiveRecord: 2.6ms)


Started GET "/games/list" for 127.0.0.1 at 2016-12-10 12:34:41 -0800
Processing by GamesController#list as HTML
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (0.9ms)[0m  [1mSELECT "games".* FROM "games"  ORDER BY name[0m
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (10.43ms)
Completed 200 OK in 31ms (Views: 14.7ms | ActiveRecord: 4.2ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:34:43 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (2.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (4.9ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (2.3ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (31.83ms)
Completed 200 OK in 42ms (Views: 25.9ms | ActiveRecord: 10.6ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:34:43 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (0.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (1.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (1.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.4ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (0.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.1ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (9.01ms)
Completed 200 OK in 16ms (Views: 6.2ms | ActiveRecord: 7.2ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:35:02 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (2.5ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 5ms (Views: 0.3ms | ActiveRecord: 2.5ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:35:02 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (0.5ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.4ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (0.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (1.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.78ms)
Completed 200 OK in 14ms (Views: 7.0ms | ActiveRecord: 3.2ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:35:02 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (2.1ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (3.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (0.6ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (9.89ms)
Completed 200 OK in 16ms (Views: 5.9ms | ActiveRecord: 7.0ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:35:29 -0800
  [1m[36mActiveRecord::SchemaMigration Load (2.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:35:29 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (1.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (7.0ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (2.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (1.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (19.75ms)
Completed 200 OK in 31ms (Views: 16.4ms | ActiveRecord: 12.3ms)
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 184ms (Views: 9.0ms | ActiveRecord: 8.4ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:35:30 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.8ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (3.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (3.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (50.95ms)
Completed 200 OK in 113ms (Views: 39.8ms | ActiveRecord: 22.6ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:35:38 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 5ms (Views: 0.3ms | ActiveRecord: 0.7ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:35:40 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 3ms (Views: 0.3ms | ActiveRecord: 0.3ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:35:40 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (0.3ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (0.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (2.8ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (0.5ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (11.63ms)
Completed 200 OK in 18ms (Views: 8.1ms | ActiveRecord: 4.7ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:35:41 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (1.7ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (3.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (10.78ms)
Completed 200 OK in 16ms (Views: 6.7ms | ActiveRecord: 6.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:36:07 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 9ms (Views: 0.3ms | ActiveRecord: 0.2ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:36:07 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (1.3ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (2.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.7ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (3.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (10.88ms)
Completed 200 OK in 17ms (Views: 6.7ms | ActiveRecord: 8.4ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:36:08 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (2.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (3.8ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (10.97ms)
Completed 200 OK in 16ms (Views: 6.8ms | ActiveRecord: 7.1ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:36:38 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 2ms (Views: 0.2ms | ActiveRecord: 0.2ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:36:38 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (3.0ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (0.4ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.1ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (2.8ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.99ms)
Completed 200 OK in 15ms (Views: 6.5ms | ActiveRecord: 6.9ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:36:39 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (0.1ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.2ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (1.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (1.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (10.65ms)
Completed 200 OK in 13ms (Views: 7.8ms | ActiveRecord: 3.7ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:38:24 -0800
  [1m[36mActiveRecord::SchemaMigration Load (3.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (3.7ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:38:25 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[36mGame Load (0.4ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35m (3.8ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
[active_model_serializers]   [1m[36mSession Load (0.7ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (0.6ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (69.19ms)
Completed 200 OK in 376ms (Views: 67.0ms | ActiveRecord: 23.0ms)
Completed 200 OK in 209ms (Views: 2.7ms | ActiveRecord: 9.6ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:38:25 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.4ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (2.4ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (3.8ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (54.75ms)
Completed 200 OK in 114ms (Views: 44.0ms | ActiveRecord: 19.8ms)


Started GET "/auth/validate_token" for 127.0.0.1 at 2016-12-10 12:38:46 -0800
Processing by DeviseTokenAuth::TokenValidationsController#validate_token as HTML
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
Completed 200 OK in 4ms (Views: 0.2ms | ActiveRecord: 1.4ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:38:46 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[36mUser Load (2.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 51]]
  [1m[36m (0.9ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')[0m
[active_model_serializers]   [1m[35mSession Load (0.5ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.1ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mSession Load (1.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (8.17ms)
Completed 200 OK in 17ms (Views: 8.9ms | ActiveRecord: 5.4ms)


Started GET "/games/51" for 127.0.0.1 at 2016-12-10 12:38:47 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
  [1m[35mUser Load (0.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "fb25d908-c530-4a7f-8370-cc95fdd51643"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 51]]
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '51')
[active_model_serializers]   [1m[36mSession Load (1.9ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mSession Load (0.9ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 51) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 2]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (15.87ms)
Completed 200 OK in 20ms (Views: 13.2ms | ActiveRecord: 3.9ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/games/51" for 127.0.0.1 at 2017-01-24 18:03:13 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.9ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by GamesController#show as HTML
  Parameters: {"id"=>"51"}
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 2ms (Views: 1.8ms | ActiveRecord: 0.0ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started GET "/" for 127.0.0.1 at 2017-02-25 20:57:21 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.4ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 3ms (Views: 2.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2017-02-25 20:57:24 -0800
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2017-02-25 20:58:18 -0800
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 8ms (Views: 2.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2017-02-25 20:58:19 -0800
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 1ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2017-02-25 20:58:20 -0800
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2017-02-25 20:58:21 -0800
Processing by WelcomeController#index as HTML
Filter chain halted as :authenticate_user! rendered or redirected
Completed 401 Unauthorized in 2ms (Views: 0.2ms | ActiveRecord: 0.0ms)


Started GET "/favicon.ico" for 127.0.0.1 at 2017-02-25 20:58:21 -0800

ActionController::RoutingError (No route matches [GET] "/favicon.ico"):
  actionpack (4.2.6) lib/action_dispatch/middleware/debug_exceptions.rb:21:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.2.6) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.2.6) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.2.6) lib/rails/rack/logger.rb:20:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.6.4) lib/rack/runtime.rb:18:in `call'
  activesupport (4.2.6) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'
  rack (1.6.4) lib/rack/lock.rb:17:in `call'
  actionpack (4.2.6) lib/action_dispatch/middleware/static.rb:120:in `call'
  rack-cors (0.4.0) lib/rack/cors.rb:80:in `call'
  railties (4.2.6) lib/rails/engine.rb:518:in `call'
  railties (4.2.6) lib/rails/application.rb:165:in `call'
  rack (1.6.4) lib/rack/content_length.rb:15:in `call'
  puma (3.6.0) lib/puma/configuration.rb:225:in `call'
  puma (3.6.0) lib/puma/server.rb:578:in `handle_request'
  puma (3.6.0) lib/puma/server.rb:415:in `process_client'
  puma (3.6.0) lib/puma/server.rb:275:in `block in run'
  puma (3.6.0) lib/puma/thread_pool.rb:116:in `block in spawn_thread'


  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (2.2ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_route.html.erb (2.6ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/routes/_table.html.erb (9.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (0.8ms)
  Rendered /home/brian/.rvm/gems/ruby-2.3.1/gems/actionpack-4.2.6/lib/action_dispatch/middleware/templates/rescues/routing_error.html.erb within rescues/layout (93.8ms)


Started POST "/auth/sign_in" for 127.0.0.1 at 2017-02-25 20:58:38 -0800
Processing by DeviseTokenAuth::SessionsController#create as HTML
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.7ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.5ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.4ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"1N2_1qA1etyPBnUeo7zgig\":{\"token\":\"$2a$10$1MMy8TaAkIndQ8H7SdRDg.ut58cuopgohmrHeXR17srzrY0RmWgTy\",\"expiry\":1489294718}}"], ["uid", "7b55d964-0bb2-4a11-9e46-06f0c61652c8"], ["confirmed_at", "2017-02-26 04:58:38.328404"], ["updated_at", "2017-02-26 04:58:38.328757"], ["id", 1]]
  [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2016-12-10 20:34:05.840162"], ["current_sign_in_at", "2017-02-26 04:58:38.361280"], ["sign_in_count", 26], ["uid", "c06be28f-8ea5-4459-8eb4-35195b4425ea"], ["confirmed_at", "2017-02-26 04:58:38.366182"], ["updated_at", "2017-02-26 04:58:38.366359"], ["id", 1]]
  [1m[35m (2.2ms)[0m  COMMIT
Completed 200 OK in 246ms (Views: 0.3ms | ActiveRecord: 8.8ms)


Started GET "/games/list" for 127.0.0.1 at 2017-02-25 20:58:40 -0800
Processing by GamesController#list as HTML
  [1m[36mUser Load (0.6ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c06be28f-8ea5-4459-8eb4-35195b4425ea"]]
  [1m[35mGame Load (8.1ms)[0m  SELECT "games".* FROM "games"  ORDER BY name
[active_model_serializers] Rendered ActiveModel::Serializer::CollectionSerializer with ActiveModel::Serializer::Adapter::Attributes (2.57ms)
Completed 200 OK in 156ms (Views: 14.8ms | ActiveRecord: 10.8ms)


Started GET "/games/6" for 127.0.0.1 at 2017-02-25 20:58:42 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1[0m  [["uid", "c06be28f-8ea5-4459-8eb4-35195b4425ea"]]
  [1m[35mGame Load (0.2ms)[0m  SELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1  [["id", 6]]
  [1m[36m (0.4ms)[0m  [1mSELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')[0m
[active_model_serializers]   [1m[35mSession Load (2.7ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.2ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mSession Load (4.3ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1
[active_model_serializers]   [1m[36mPlayer Load (0.3ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 4]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1[0m  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (47.94ms)
Completed 200 OK in 66ms (Views: 34.7ms | ActiveRecord: 20.1ms)


Started GET "/games/6" for 127.0.0.1 at 2017-02-25 20:58:42 -0800
Processing by GamesController#show as HTML
  Parameters: {"id"=>"6"}
  [1m[35mUser Load (1.4ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."uid" = $1 LIMIT 1  [["uid", "c06be28f-8ea5-4459-8eb4-35195b4425ea"]]
  [1m[36mGame Load (0.2ms)[0m  [1mSELECT  "games".* FROM "games" WHERE "games"."id" = $1 LIMIT 1[0m  [["id", 6]]
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "sessions" WHERE (game_id = '6')
[active_model_serializers]   [1m[36mSession Load (1.9ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.2ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mSession Load (2.1ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage ASC LIMIT 1[0m
[active_model_serializers]   [1m[35mPlayer Load (0.3ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 4]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers]   [1m[36mCACHE (0.0ms)[0m  [1mSELECT  session_players.player_id,
                 count(*) as plays,
                 sum(case "placing"
                    when 1 then 1
                    else 0 end) as wins,
                 (sum(CASE "placing" WHEN 1 THEN 1 ELSE 0 END) / count(*)::float) as win_percentage FROM "sessions" INNER JOIN "session_players" ON "session_players"."session_id" = "sessions"."id" WHERE (game_id = 6) GROUP BY session_players.player_id  ORDER BY win_percentage desc LIMIT 1[0m
[active_model_serializers]   [1m[35mCACHE (0.0ms)[0m  SELECT  "players".* FROM "players" WHERE "players"."id" = $1 LIMIT 1  [["id", 1]]
[active_model_serializers] Rendered Games::ShowSerializer with ActiveModel::Serializer::Adapter::Attributes (12.1ms)
Completed 200 OK in 18ms (Views: 8.6ms | ActiveRecord: 6.2ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)


Started POST "/auth/sign_in" for 127.0.0.1 at 2017-03-19 21:37:20 -0700
  [1m[36mActiveRecord::SchemaMigration Load (1.7ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by DeviseTokenAuth::SessionsController#create as JSON
  Parameters: {"email"=>"gametracker@example.com", "password"=>"[FILTERED]"}
  [1m[35mUser Load (0.8ms)[0m  SELECT  "users".* FROM "users" WHERE (email = 'gametracker@example.com' AND provider='email')  ORDER BY "users"."id" ASC LIMIT 1
  [1m[36m (0.2ms)[0m  [1mBEGIN[0m
  [1m[35mSQL (0.3ms)[0m  UPDATE "users" SET "tokens" = $1, "uid" = $2, "confirmed_at" = $3, "updated_at" = $4 WHERE "users"."id" = $5  [["tokens", "{\"_ySBbSVDtayk-HRKssKs6A\":{\"token\":\"$2a$10$wKIhu6jsBsZUmTg98tiDqOqL/VZwG6QPSjQ6IgYxS2ZhXs1Qn0VM2\",\"expiry\":1491194240}}"], ["uid", "ee50c39d-b587-41db-9534-15a88346683a"], ["confirmed_at", "2017-03-20 04:37:20.894409"], ["updated_at", "2017-03-20 04:37:20.894842"], ["id", 1]]
  [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
  [1m[35m (0.1ms)[0m  BEGIN
  [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "last_sign_in_at" = $1, "current_sign_in_at" = $2, "sign_in_count" = $3, "uid" = $4, "confirmed_at" = $5, "updated_at" = $6 WHERE "users"."id" = $7[0m  [["last_sign_in_at", "2017-02-26 04:58:38.361280"], ["current_sign_in_at", "2017-03-20 04:37:20.920529"], ["sign_in_count", 27], ["uid", "b1e97637-3a65-4f4d-b34f-27d900644063"], ["confirmed_at", "2017-03-20 04:37:20.922142"], ["updated_at", "2017-03-20 04:37:20.922336"], ["id", 1]]
  [1m[35m (0.7ms)[0m  COMMIT
Completed 200 OK in 430ms (Views: 1.8ms | ActiveRecord: 8.1ms)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/tsort.rb:228)
DEPRECATION WARNING: [Devise] config.email_regexp will have a new default on Devise 4.1
To keep the current behavior please set in your config/initializers/devise.rb the following:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@([^@\s]+\.)+[^@\W]+\z/
  end

If you want to use the new default:

  Devise.setup do |config|
    config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  end
. (called from block in tsort_each at /home/brian/.rvm/rubies/ruby-2.3.3/lib/ruby/2.3.0/tsort.rb:228)
